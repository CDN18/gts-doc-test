{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "GoToSocial Swagger documentation.",
    "contact": {
      "name": "GoToSocial Authors",
      "email": "admin@gotosocial.org"
    },
    "license": {
      "name": "AGPL3",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "REPLACE_ME"
  },
  "host": "example.org",
  "basePath": "/",
  "paths": {
    "/.well-known/host-meta": {
      "get": {
        "description": "See: https://www.rfc-editor.org/rfc/rfc6415.html",
        "produces": [
          "application/xrd+xml\""
        ],
        "tags": [
          ".well-known"
        ],
        "summary": "Returns a compliant hostmeta response to web host metadata queries.",
        "operationId": "hostMetaGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/hostmeta"
            }
          }
        }
      }
    },
    "/.well-known/nodeinfo": {
      "get": {
        "description": "eg. `{\"links\":[{\"rel\":\"http://nodeinfo.diaspora.software/ns/schema/2.0\",\"href\":\"http://example.org/nodeinfo/2.0\"}]}`\nSee: https://nodeinfo.diaspora.software/protocol.html",
        "produces": [
          "application/json"
        ],
        "tags": [
          ".well-known"
        ],
        "summary": "Returns a well-known response which redirects callers to `/nodeinfo/2.0`.",
        "operationId": "nodeInfoWellKnownGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/wellKnownResponse"
            }
          }
        }
      }
    },
    "/.well-known/webfinger": {
      "get": {
        "description": "For example, a GET to `https://goblin.technology/.well-known/webfinger?resource=acct:tobi@goblin.technology` would return:\n\n```\n\n{\"subject\":\"acct:tobi@goblin.technology\",\"aliases\":[\"https://goblin.technology/users/tobi\",\"https://goblin.technology/@tobi\"],\"links\":[{\"rel\":\"http://webfinger.net/rel/profile-page\",\"type\":\"text/html\",\"href\":\"https://goblin.technology/@tobi\"},{\"rel\":\"self\",\"type\":\"application/activity+json\",\"href\":\"https://goblin.technology/users/tobi\"}]}\n\n```\n\nSee: https://webfinger.net/",
        "produces": [
          "application/jrd+json"
        ],
        "tags": [
          ".well-known"
        ],
        "summary": "Handles webfinger account lookup requests.",
        "operationId": "webfingerGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/wellKnownResponse"
            }
          }
        }
      }
    },
    "/api/v1/accounts": {
      "post": {
        "security": [
          {
            "OAuth2 Application": [
              "write:accounts"
            ]
          }
        ],
        "description": "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Create a new account using an application token.",
        "operationId": "accountCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Reason",
            "description": "Text that will be reviewed by moderators if registrations require manual approval.",
            "name": "reason",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Username",
            "description": "The desired username for the account.",
            "name": "username",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Email",
            "description": "The email address to be used for login.",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Password",
            "description": "The password to be used for login. This will be hashed before storage.",
            "name": "password",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Agreement",
            "description": "The user agrees to the terms, conditions, and policies of the instance.",
            "name": "agreement",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Locale",
            "description": "The language of the confirmation email that will be sent.",
            "name": "locale",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An OAuth2 access token for the newly-created account.",
            "schema": {
              "$ref": "#/definitions/oauthToken"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "Unprocessable. Your account creation request cannot be processed because either too many accounts have been created on this instance in the last 24h, or the pending account backlog is full."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/alias": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "description": "This is useful when you want to move from another account this this account.\n\nIn such cases, you should set the alsoKnownAs of this account to the URI of\nthe account you want to move from.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Alias your account to another account by setting alsoKnownAs to the given URI.",
        "operationId": "accountAlias",
        "parameters": [
          {
            "type": "string",
            "description": "ActivityPub URI/IDs of target accounts to which this account is being aliased. Eg., `[\"https://example.org/users/some_account\"]`.\nUse an empty array to unset alsoKnownAs, clearing the aliases.",
            "name": "also_known_as_uris",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly updated account.",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "Unprocessable. Check the response body for more details."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/delete": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Delete your account.",
        "operationId": "accountDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Password of the account user, for confirmation.",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "The account deletion has been accepted and the account will be deleted."
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/lookup": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Quickly lookup a username to see if it is available, skipping WebFinger resolution.",
        "operationId": "accountLookupGet",
        "parameters": [
          {
            "type": "string",
            "description": "The username or Webfinger address to lookup.",
            "name": "acct",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Result of the lookup.",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/move": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Move your account to another account.",
        "operationId": "accountMove",
        "parameters": [
          {
            "type": "string",
            "description": "Password of the account user, for confirmation.",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "ActivityPub URI/ID of the target account. Eg., `https://example.org/users/some_account`. The target account must be alsoKnownAs the requesting account in order for the move to be successful.",
            "name": "moved_to_uri",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "The account move has been accepted and the account will be moved."
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "Unprocessable. Check the response body for more details."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/relationships": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "See your account's relationships with the given account IDs.",
        "operationId": "accountRelationships",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Account IDs.",
            "name": "id[]",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of account relationships.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountRelationship"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/search": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Search for accounts by username and/or display name.",
        "operationId": "accountSearchGet",
        "parameters": [
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of results to try to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Page number of results to return (starts at 0). This parameter is currently not used, offsets over 0 will always return 0 results.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to search for. This can be in the following forms:\n- `@[username]` -- search for an account with the given username on any domain. Can return multiple results.\n- `@[username]@[domain]` -- search for a remote account with exact username and domain. Will only ever return 1 result at most.\n- any arbitrary string -- search for accounts containing the given string in their username or display name. Can return multiple results.",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If query is for `@[username]@[domain]`, or a URL, allow the GoToSocial instance to resolve the search by making calls to remote instances (webfinger, ActivityPub, etc).",
            "name": "resolve",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Show only accounts that the requesting account follows. If this is set to `true`, then the GoToSocial instance will enhance the search by also searching within account notes, not just in usernames and display names.",
            "name": "following",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Results of the search.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/themes": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "See preset CSS themes available to accounts on this instance.",
        "operationId": "accountThemes",
        "responses": {
          "200": {
            "description": "Array of themes.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/theme"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/update_credentials": {
      "patch": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Update your account.",
        "operationId": "accountUpdate",
        "parameters": [
          {
            "type": "boolean",
            "description": "Account should be made discoverable and shown in the profile directory (if enabled).",
            "name": "discoverable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Account is flagged as a bot.",
            "name": "bot",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "The display name to use for the account.",
            "name": "display_name",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "type": "string",
            "description": "Bio/description of this account.",
            "name": "note",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "type": "file",
            "description": "Avatar of the user.",
            "name": "avatar",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "Header of the user.",
            "name": "header",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Require manual approval of follow requests.",
            "name": "locked",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Default post privacy for authored statuses.",
            "name": "source[privacy]",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Mark authored statuses as sensitive by default.",
            "name": "source[sensitive]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Default language to use for authored statuses (ISO 6391).",
            "name": "source[language]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Default content type to use for authored statuses (text/plain or text/markdown).",
            "name": "source[status_content_type]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "FileName of the theme to use when rendering this account's profile or statuses. The theme must exist on this server, as indicated by /api/v1/accounts/themes. Empty string unsets theme and returns to the default GoToSocial theme.",
            "name": "theme",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Custom CSS to use when rendering this account's profile or statuses. String must be no more than 5,000 characters (~5kb).",
            "name": "custom_css",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Enable RSS feed for this account's Public posts at `/[username]/feed.rss`",
            "name": "enable_rss",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Hide the account's following/followers collections.",
            "name": "hide_collections",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Name of 1st profile field to be added to this account's profile. (The index may be any string; add more indexes to send more fields.)",
            "name": "fields_attributes[0][name]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Value of 1st profile field to be added to this account's profile. (The index may be any string; add more indexes to send more fields.)",
            "name": "fields_attributes[0][value]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Name of 2nd profile field to be added to this account's profile.",
            "name": "fields_attributes[1][name]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Value of 2nd profile field to be added to this account's profile.",
            "name": "fields_attributes[1][value]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Name of 3rd profile field to be added to this account's profile.",
            "name": "fields_attributes[2][name]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Value of 3rd profile field to be added to this account's profile.",
            "name": "fields_attributes[2][value]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Name of 4th profile field to be added to this account's profile.",
            "name": "fields_attributes[3][name]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Value of 4th profile field to be added to this account's profile.",
            "name": "fields_attributes[3][value]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Name of 5th profile field to be added to this account's profile.",
            "name": "fields_attributes[4][name]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Value of 5th profile field to be added to this account's profile.",
            "name": "fields_attributes[4][value]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Name of 6th profile field to be added to this account's profile.",
            "name": "fields_attributes[5][name]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Value of 6th profile field to be added to this account's profile.",
            "name": "fields_attributes[5][value]",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly updated account.",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/verify_credentials": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Verify a token by returning account details pertaining to it.",
        "operationId": "accountVerify",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Get information about an account with the given ID.",
        "operationId": "accountGet",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the requested account.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested account.",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/block": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:blocks"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Block account with id.",
        "operationId": "accountBlock",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the account to block.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to the account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/follow": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:follows"
            ]
          }
        ],
        "description": "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.\n\nIf you already follow (request) the given account, then the follow (request) will be updated instead using the\n`reblogs` and `notify` parameters.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Follow account with id.",
        "operationId": "accountFollow",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account to follow.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show reblogs from this account.",
            "name": "reblogs",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Notify when this account posts.",
            "name": "notify",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to this account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/followers": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/accounts/0657WMDEC3KQDTD6NZ4XJZBK4M/followers?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/accounts/0657WMDEC3KQDTD6NZ4XJZBK4M/followers?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````\n\nIf account `hide_collections` is true, and requesting account != target account, no results will be returned.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "See followers of account with given id.",
        "operationId": "accountFollowers",
        "parameters": [
          {
            "type": "string",
            "description": "Account ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Return only follower accounts *OLDER* than the given max ID. The follower account with the specified ID will not be included in the response. NOTE: the ID is of the internal follow, NOT any of the returned accounts.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only follower accounts *NEWER* than the given since ID. The follower account with the specified ID will not be included in the response. NOTE: the ID is of the internal follow, NOT any of the returned accounts.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only follower accounts *IMMEDIATELY NEWER* than the given min ID. The follower account with the specified ID will not be included in the response. NOTE: the ID is of the internal follow, NOT any of the returned accounts.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of follower accounts to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of accounts that follow this account.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/following": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/accounts/0657WMDEC3KQDTD6NZ4XJZBK4M/following?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/accounts/0657WMDEC3KQDTD6NZ4XJZBK4M/following?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````\n\nIf account `hide_collections` is true, and requesting account != target account, no results will be returned.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "See accounts followed by given account id.",
        "operationId": "accountFollowing",
        "parameters": [
          {
            "type": "string",
            "description": "Account ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Return only following accounts *OLDER* than the given max ID. The following account with the specified ID will not be included in the response. NOTE: the ID is of the internal follow, NOT any of the returned accounts.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only following accounts *NEWER* than the given since ID. The following account with the specified ID will not be included in the response. NOTE: the ID is of the internal follow, NOT any of the returned accounts.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only following accounts *IMMEDIATELY NEWER* than the given min ID. The following account with the specified ID will not be included in the response. NOTE: the ID is of the internal follow, NOT any of the returned accounts.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of following accounts to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of accounts that are followed by this account.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/lists": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "See all lists of yours that contain requested account.",
        "operationId": "accountLists",
        "parameters": [
          {
            "type": "string",
            "description": "Account ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of all lists containing this account.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/list"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/note": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Set a private note for an account with the given id.",
        "operationId": "accountNote",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the account for which to set a note.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "",
            "description": "The text of the note. Omit this parameter or send an empty string to clear the note.",
            "name": "comment",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to the account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/statuses": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "description": "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "See statuses posted by the requested account.",
        "operationId": "accountStatuses",
        "parameters": [
          {
            "type": "string",
            "description": "Account ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 30,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Exclude statuses that are a reply to another status.",
            "name": "exclude_replies",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Exclude statuses that are a reblog/boost of another status.",
            "name": "exclude_reblogs",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *NEWER* than the given min status ID. The status with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Show only pinned statuses. In other words, exclude statuses that are not pinned to the given account ID.",
            "name": "pinned",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Show only statuses with media attachments.",
            "name": "only_media",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Show only statuses with a privacy setting of 'public'.",
            "name": "only_public",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of statuses.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/unblock": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:blocks"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Unblock account with ID.",
        "operationId": "accountUnblock",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the account to unblock.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to this account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/accounts/{id}/unfollow": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:follows"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Unfollow account with id.",
        "operationId": "accountUnfollow",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the account to unfollow.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to this account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/accounts": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/admin/accounts?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/admin/accounts?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View + page through known accounts according to given filters.",
        "operationId": "adminAccountsGetV1",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for local accounts.",
            "name": "local",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for remote accounts.",
            "name": "remote",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for currently active accounts.",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for currently pending accounts.",
            "name": "pending",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for currently disabled accounts.",
            "name": "disabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for currently silenced accounts.",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for currently suspended accounts.",
            "name": "suspended",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for accounts force-marked as sensitive.",
            "name": "sensitized",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search for the given username.",
            "name": "username",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search for the given display name.",
            "name": "display_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by the given domain.",
            "name": "by_domain",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Lookup a user with this email.",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Lookup users with this IP address.",
            "name": "ip",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Filter for staff accounts.",
            "name": "staff",
            "in": "query"
          },
          {
            "type": "string",
            "description": "All results returned will be older than the item with this ID.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "All results returned will be newer than the item with this ID.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Returns results immediately newer than the item with this ID.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "default": 100,
            "description": "Maximum number of results to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminAccountInfo"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/accounts/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View one account.",
        "operationId": "adminAccountGet",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/adminAccountInfo"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/accounts/{id}/action": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Perform an admin action on an account.",
        "operationId": "adminAccountAction",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Type of action to be taken, currently only supports `suspend`.",
            "name": "type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional text describing why this action was taken.",
            "name": "text",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "Conflict: There is already an admin action running that conflicts with this action. Check the error message in the response body for more information. This is a temporary error; it should be possible to process this action if you try again in a bit."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/accounts/{id}/approve": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Approve pending account.",
        "operationId": "adminAccountApprove",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The now-approved account.",
            "schema": {
              "$ref": "#/definitions/adminAccountInfo"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/accounts/{id}/reject": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Reject pending account.",
        "operationId": "adminAccountReject",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comment to leave on why the account was denied. The comment will be visible to admins only.",
            "name": "private_comment",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Message to include in email to applicant. Will be included only if send_email is true.",
            "name": "message",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Send an email to the applicant informing them that their sign-up has been rejected.",
            "name": "send_email",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The now-rejected account.",
            "schema": {
              "$ref": "#/definitions/adminAccountInfo"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/custom_emojis": {
      "get": {
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n`\u003chttp://localhost:8080/api/v1/admin/custom_emojis?limit=30\u0026max_shortcode_domain=yell@fossbros-anonymous.io\u0026filter=domain:all\u003e; rel=\"next\", \u003chttp://localhost:8080/api/v1/admin/custom_emojis?limit=30\u0026min_shortcode_domain=rainbow@\u0026filter=domain:all\u003e; rel=\"prev\"`",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View local and remote emojis available to / known by this instance.",
        "operationId": "emojisGet",
        "parameters": [
          {
            "type": "string",
            "default": "domain:all",
            "description": "Comma-separated list of filters to apply to results. Recognized filters are:\n\n`domain:[domain]` -- show emojis from the given domain, eg `?filter=domain:example.org` will show emojis from `example.org` only.\nInstead of giving a specific domain, you can also give either one of the key words `local` or `all` to show either local emojis only (`domain:local`) or show all emojis from all domains (`domain:all`).\nNote: `domain:*` is equivalent to `domain:all` (including local).\nIf no domain filter is provided, `domain:all` will be assumed.\n\n`disabled` -- include emojis that have been disabled.\n\n`enabled` -- include emojis that are enabled.\n\n`shortcode:[shortcode]` -- show only emojis with the given shortcode, eg `?filter=shortcode:blob_cat_uwu` will show only emojis with the shortcode `blob_cat_uwu` (case sensitive).\n\nIf neither `disabled` or `enabled` are provided, both disabled and enabled emojis will be shown.\n\nIf no filter query string is provided, the default `domain:all` will be used, which will show all emojis from all domains.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 50,
            "description": "Number of emojis to return. Less than 1, or not set, means unlimited (all emojis).",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only emojis with `[shortcode]@[domain]` *LOWER* (alphabetically) than given `[shortcode]@[domain]`. For example, if `max_shortcode_domain=beep@example.org`, then returned values might include emojis with `[shortcode]@[domain]`s like `car@example.org`, `debian@aaa.com`, `test@` (local emoji), etc.\nEmoji with the given `[shortcode]@[domain]` will not be included in the result set.",
            "name": "max_shortcode_domain",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only emojis with `[shortcode]@[domain]` *HIGHER* (alphabetically) than given `[shortcode]@[domain]`. For example, if `max_shortcode_domain=beep@example.org`, then returned values might include emojis with `[shortcode]@[domain]`s like `arse@test.com`, `0101_binary@hackers.net`, `bee@` (local emoji), etc.\nEmoji with the given `[shortcode]@[domain]` will not be included in the result set.",
            "name": "min_shortcode_domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of emojis, arranged alphabetically by shortcode and domain.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminEmoji"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Upload and create a new instance emoji.",
        "operationId": "emojiCreate",
        "parameters": [
          {
            "pattern": "\\w{2,30}",
            "type": "string",
            "description": "The code to use for the emoji, which will be used by instance denizens to select it. This must be unique on the instance.",
            "name": "shortcode",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "A png or gif image of the emoji. Animated pngs work too! To ensure compatibility with other fedi implementations, emoji size limit is 50kb by default.",
            "name": "image",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Category in which to place the new emoji. If left blank, emoji will be uncategorized. If a category with the given name doesn't exist yet, it will be created.",
            "name": "category",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly-created emoji.",
            "schema": {
              "$ref": "#/definitions/emoji"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "conflict -- shortcode for this emoji is already in use"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/custom_emojis/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get a list of existing emoji categories.",
        "operationId": "emojiCategoriesGet",
        "responses": {
          "200": {
            "description": "Array of existing emoji categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/emojiCategory"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/custom_emojis/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get the admin view of a single emoji.",
        "operationId": "emojiGet",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the emoji.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A single emoji.",
            "schema": {
              "$ref": "#/definitions/adminEmoji"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "Emoji with the given ID will no longer be available to use on the instance.\n\nIf you just want to update the emoji image instead, use the `/api/v1/admin/custom_emojis/{id}` PATCH route.\n\nTo disable emojis from **remote** instances, use the `/api/v1/admin/custom_emojis/{id}` PATCH route.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete a **local** emoji with the given ID from the instance.",
        "operationId": "emojiDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the emoji.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted emoji will be returned to the caller in case further processing is necessary.",
            "schema": {
              "$ref": "#/definitions/adminEmoji"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "Action performed depends upon the action `type` provided.\n\n`disable`: disable a REMOTE emoji from being used/displayed on this instance. Does not work for local emojis.\n\n`copy`: copy a REMOTE emoji to this instance. When doing this action, a shortcode MUST be provided, and it must\nbe unique among emojis already present on this instance. A category MAY be provided, and the copied emoji will then\nbe put into the provided category.\n\n`modify`: modify a LOCAL emoji. You can provide a new image for the emoji and/or update the category.\n\nLocal emojis cannot be deleted using this endpoint. To delete a local emoji, check DELETE /api/v1/admin/custom_emojis/{id} instead.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Perform admin action on a local or remote emoji known to this instance.",
        "operationId": "emojiUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the emoji.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "copy",
              "disable",
              "modify"
            ],
            "type": "string",
            "description": "Type of action to be taken. One of: (`disable`, `copy`, `modify`).\nFor REMOTE emojis, `copy` or `disable` are supported.\nFor LOCAL emojis, only `modify` is supported.",
            "name": "type",
            "in": "formData",
            "required": true
          },
          {
            "pattern": "\\w{2,30}",
            "type": "string",
            "description": "The code to use for the emoji, which will be used by instance denizens to select it. This must be unique on the instance. Works for the `copy` action type only.",
            "name": "shortcode",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "A new png or gif image to use for the emoji. Animated pngs work too! To ensure compatibility with other fedi implementations, emoji size limit is 50kb by default. Works for LOCAL emojis only.",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Category in which to place the emoji. If a category with the given name doesn't exist yet, it will be created.",
            "name": "category",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated emoji.",
            "schema": {
              "$ref": "#/definitions/adminEmoji"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/debug/apurl": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "Only enabled / exposed if GoToSocial was built and is running with flag DEBUG=1.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "debug"
        ],
        "summary": "Perform a GET to the specified ActivityPub URL and return detailed debugging information.",
        "operationId": "debugAPUrl",
        "parameters": [
          {
            "type": "string",
            "description": "The URL / ActivityPub ID to dereference. This should be a full URL, including protocol. Eg., `https://example.org/users/someone`",
            "name": "url",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/debugAPUrlResponse"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/domain_allows": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View all domain allows currently in place.",
        "operationId": "domainAllowsGet",
        "parameters": [
          {
            "type": "boolean",
            "description": "If set to `true`, then each entry in the returned list of domain allows will only consist of the fields `domain` and `public_comment`. This is perfect for when you want to save and share a list of all the domains you have allowed on your instance, so that someone else can easily import them, but you don't want them to see the database IDs of your allows, or private comments etc.",
            "name": "export",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All domain allows currently in place.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/domainPermission"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "You have two options when using this endpoint: either you can set `import` to `true` and\nupload a file containing multiple domain allows, JSON-formatted, or you can leave import as\n`false`, and just add one domain allow.\n\nThe format of the json file should be something like: `[{\"domain\":\"example.org\"},{\"domain\":\"whatever.com\",\"public_comment\":\"they smell\"}]`",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create one or more domain allows, from a string or a file.",
        "operationId": "domainAllowCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Signal that a list of domain allows is being imported as a file. If set to `true`, then 'domains' must be present as a JSON-formatted file. If set to `false`, then `domains` will be ignored, and `domain` must be present.",
            "name": "import",
            "in": "query"
          },
          {
            "type": "file",
            "description": "JSON-formatted list of domain allows to import. This is only used if `import` is set to `true`.",
            "name": "domains",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Single domain to allow. Used only if `import` is not `true`.",
            "name": "domain",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Obfuscate the name of the domain when serving it publicly. Eg., `example.org` becomes something like `ex***e.org`. Used only if `import` is not `true`.",
            "name": "obfuscate",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Public comment about this domain allow. This will be displayed alongside the domain allow if you choose to share allows. Used only if `import` is not `true`.",
            "name": "public_comment",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Private comment about this domain allow. Will only be shown to other admins, so this is a useful way of internally keeping track of why a certain domain ended up allowed. Used only if `import` is not `true`.",
            "name": "private_comment",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created domain allow, if `import` != `true`. If a list has been imported, then an `array` of newly created domain allows will be returned instead.",
            "schema": {
              "$ref": "#/definitions/domainPermission"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "Conflict: There is already an admin action running that conflicts with this action. Check the error message in the response body for more information. This is a temporary error; it should be possible to process this action if you try again in a bit."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/domain_allows/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View domain allow with the given ID.",
        "operationId": "domainAllowGet",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the domain allow.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested domain allow.",
            "schema": {
              "$ref": "#/definitions/domainPermission"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete domain allow with the given ID.",
        "operationId": "domainAllowDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the domain allow.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The domain allow that was just deleted.",
            "schema": {
              "$ref": "#/definitions/domainPermission"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "Conflict: There is already an admin action running that conflicts with this action. Check the error message in the response body for more information. This is a temporary error; it should be possible to process this action if you try again in a bit."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/domain_blocks": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View all domain blocks currently in place.",
        "operationId": "domainBlocksGet",
        "parameters": [
          {
            "type": "boolean",
            "description": "If set to `true`, then each entry in the returned list of domain blocks will only consist of the fields `domain` and `public_comment`. This is perfect for when you want to save and share a list of all the domains you have blocked on your instance, so that someone else can easily import them, but you don't want them to see the database IDs of your blocks, or private comments etc.",
            "name": "export",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All domain blocks currently in place.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/domainPermission"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "You have two options when using this endpoint: either you can set `import` to `true` and\nupload a file containing multiple domain blocks, JSON-formatted, or you can leave import as\n`false`, and just add one domain block.\n\nThe format of the json file should be something like: `[{\"domain\":\"example.org\"},{\"domain\":\"whatever.com\",\"public_comment\":\"they smell\"}]`",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create one or more domain blocks, from a string or a file.",
        "operationId": "domainBlockCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Signal that a list of domain blocks is being imported as a file. If set to `true`, then 'domains' must be present as a JSON-formatted file. If set to `false`, then `domains` will be ignored, and `domain` must be present.",
            "name": "import",
            "in": "query"
          },
          {
            "type": "file",
            "description": "JSON-formatted list of domain blocks to import. This is only used if `import` is set to `true`.",
            "name": "domains",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Single domain to block. Used only if `import` is not `true`.",
            "name": "domain",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Obfuscate the name of the domain when serving it publicly. Eg., `example.org` becomes something like `ex***e.org`. Used only if `import` is not `true`.",
            "name": "obfuscate",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Public comment about this domain block. This will be displayed alongside the domain block if you choose to share blocks. Used only if `import` is not `true`.",
            "name": "public_comment",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Private comment about this domain block. Will only be shown to other admins, so this is a useful way of internally keeping track of why a certain domain ended up blocked. Used only if `import` is not `true`.",
            "name": "private_comment",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created domain block, if `import` != `true`. If a list has been imported, then an `array` of newly created domain blocks will be returned instead.",
            "schema": {
              "$ref": "#/definitions/domainPermission"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "Conflict: There is already an admin action running that conflicts with this action. Check the error message in the response body for more information. This is a temporary error; it should be possible to process this action if you try again in a bit."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/domain_blocks/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View domain block with the given ID.",
        "operationId": "domainBlockGet",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the domain block.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested domain block.",
            "schema": {
              "$ref": "#/definitions/domainPermission"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete domain block with the given ID.",
        "operationId": "domainBlockDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the domain block.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The domain block that was just deleted.",
            "schema": {
              "$ref": "#/definitions/domainPermission"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "Conflict: There is already an admin action running that conflicts with this action. Check the error message in the response body for more information. This is a temporary error; it should be possible to process this action if you try again in a bit."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/domain_keys_expire": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "This is useful in cases where the remote domain has had to rotate their keys for whatever\nreason (security issue, data leak, routine safety procedure, etc), and your instance can no\nlonger communicate with theirs properly using cached keys. A key marked as expired in this way\nwill be lazily refetched next time a request is made to your instance signed by the owner of that\nkey, so no further action should be required in order to reestablish communication with that domain.\n\nThis endpoint is explicitly not for rotating your *own* keys, it only works for remote instances.\n\nUsing this endpoint to expire keys for a domain that hasn't rotated all of their keys is not\nharmful and won't break federation, but it is pointless and will cause unnecessary requests to\nbe performed.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Force expiry of cached public keys for all accounts on the given domain stored in your database.",
        "operationId": "domainKeysExpire",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Domain",
            "description": "Domain to expire keys for.\nSample: example.org",
            "name": "domain",
            "in": "formData"
          }
        ],
        "responses": {
          "202": {
            "description": "Request accepted and will be processed. Check the logs for progress / errors.",
            "schema": {
              "$ref": "#/definitions/adminActionResponse"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "409": {
            "description": "Conflict: There is already an admin action running that conflicts with this action. Check the error message in the response body for more information. This is a temporary error; it should be possible to process this action if you try again in a bit."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/email/test": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "This can be used to validate an instance's SMTP configuration, and to debug any potential issues.\n\nIf an error is returned by the SMTP connection, this handler will return code 422 to indicate that\nthe request could not be processed, and the SMTP error will be returned to the caller.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Send a generic test email to a specified email address.",
        "operationId": "testEmailSend",
        "parameters": [
          {
            "type": "string",
            "description": "The email address that the test email should be sent to.",
            "name": "email",
            "in": "formData"
          }
        ],
        "responses": {
          "202": {
            "description": "Test email was sent."
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "An smtp occurred while the email attempt was in progress. Check the returned json for more information. The smtp error will be included, to help you debug communication with the smtp server."
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/header_allows": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get all \"allow\" header filters currently in place.",
        "operationId": "headerFilterAllowsGet",
        "responses": {
          "200": {
            "description": "All \"allow\" header filters currently in place.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/headerFilter"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create new \"allow\" HTTP request header filter.",
        "operationId": "headerFilterAllowCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Header",
            "description": "The HTTP header to match against (e.g. User-Agent).",
            "name": "header",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Regex",
            "description": "The header value matching regular expression.",
            "name": "regex",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created \"allow\" header filter.",
            "schema": {
              "$ref": "#/definitions/headerFilter"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/header_allows/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get \"allow\" header filter with the given ID.",
        "operationId": "headerFilterAllowGet",
        "parameters": [
          {
            "type": "string",
            "description": "Target header filter ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested \"allow\" header filter.",
            "schema": {
              "$ref": "#/definitions/headerFilter"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete the \"allow\" header filter with the given ID.",
        "operationId": "headerFilterAllowDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Target header filter ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/header_blocks": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get all \"allow\" header filters currently in place.",
        "operationId": "headerFilterBlocksGet",
        "responses": {
          "200": {
            "description": "All \"block\" header filters currently in place.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/headerFilter"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create new \"block\" HTTP request header filter.",
        "operationId": "headerFilterBlockCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Header",
            "description": "The HTTP header to match against (e.g. User-Agent).",
            "name": "header",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Regex",
            "description": "The header value matching regular expression.",
            "name": "regex",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created \"block\" header filter.",
            "schema": {
              "$ref": "#/definitions/headerFilter"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/header_blocks/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get \"block\" header filter with the given ID.",
        "operationId": "headerFilterBlockGet",
        "parameters": [
          {
            "type": "string",
            "description": "Target header filter ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested \"block\" header filter.",
            "schema": {
              "$ref": "#/definitions/headerFilter"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete the \"block\" header filter with the given ID.",
        "operationId": "headerFilterBlockDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Target header filter ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/instance/rules": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create a new instance rule.",
        "operationId": "ruleCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Text",
            "description": "Text body for the instance rule, plaintext.",
            "name": "text",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly-created instance rule.",
            "schema": {
              "$ref": "#/definitions/instanceRule"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/instance/rules/{id}": {
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete an existing instance rule.",
        "operationId": "ruleDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the rule to delete.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted instance rule.",
            "schema": {
              "$ref": "#/definitions/instanceRule"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Update an existing instance rule.",
        "operationId": "ruleUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "The id of the rule to update.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Text",
            "description": "Text body for the updated instance rule, plaintext.",
            "name": "text",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The updated instance rule.",
            "schema": {
              "$ref": "#/definitions/instanceRule"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/media_cleanup": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "Also cleans up unused headers + avatars from the media cache and prunes orphaned items from storage.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Clean up remote media older than the specified number of days.",
        "operationId": "mediaCleanup",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RemoteCacheDays",
            "description": "Number of days of remote media to keep. Native values will be treated as 0.\nIf value is not specified, the value of media-remote-cache-days in the server config will be used.",
            "name": "remote_cache_days",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Echos the number of days requested. The cleanup is performed asynchronously after the request completes."
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/media_refetch": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "Currently, this only includes remote emojis.\nThis endpoint is useful when data loss has occurred, and you want to try to recover to a working state.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Refetch media specified in the database but missing from storage.",
        "operationId": "mediaRefetch",
        "parameters": [
          {
            "type": "string",
            "description": "Domain to refetch media from. If empty, all domains will be refetched.",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Request accepted and will be processed. Check the logs for progress / errors."
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/reports": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "The reports will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe next and previous queries can be parsed from the returned Link header.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/admin/reports?limit=20\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/admin/reports?limit=20\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View user moderation reports.",
        "operationId": "adminReports",
        "parameters": [
          {
            "type": "boolean",
            "description": "If set to true, only resolved reports will be returned. If false, only unresolved reports will be returned. If unset, reports will not be filtered on their resolved status.",
            "name": "resolved",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports created by the given account id.",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports that target the given account id.",
            "name": "target_account_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports *OLDER* than the given max ID. The report with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports *NEWER* than the given since ID. The report with the specified ID will not be included in the response. This parameter is functionally equivalent to min_id.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports *NEWER* than the given min ID. The report with the specified ID will not be included in the response. This parameter is functionally equivalent to since_id.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Number of reports to return. If more than 100 or less than 1, will be clamped to 100.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of reports.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminReport"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/reports/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View user moderation report with the given id.",
        "operationId": "adminReportGet",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the report.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested report.",
            "schema": {
              "$ref": "#/definitions/adminReport"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/reports/{id}/resolve": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Mark a report as resolved.",
        "operationId": "adminReportResolve",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the report.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional admin comment on the action taken in response to this report. Useful for providing an explanation about what action was taken (if any) before the report was marked as resolved. This will be visible to the user that created the report!\nSample: The reported account was suspended.",
            "name": "action_taken_comment",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The resolved report.",
            "schema": {
              "$ref": "#/definitions/adminReport"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/rules": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "The rules will be returned in order (sorted by Order ascending).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View instance rules, with IDs.",
        "operationId": "adminsRuleGet",
        "responses": {
          "200": {
            "description": "An array with all the rules for the local instance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/instanceRule"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/admin/rules/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View instance rule with the given id.",
        "operationId": "adminRuleGet",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the rule.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested rule.",
            "schema": {
              "$ref": "#/definitions/instanceRule"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/apps": {
      "post": {
        "description": "The registered application can be used to obtain an application token.\nThis can then be used to register a new account, or (through user auth) obtain an access token.\n\nThe parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Register a new application on this instance.",
        "operationId": "appCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClientName",
            "description": "The name of the application.",
            "name": "client_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RedirectURIs",
            "description": "Where the user should be redirected after authorization.\n\nTo display the authorization code to the user instead of redirecting to a web page, use `urn:ietf:wg:oauth:2.0:oob` in this parameter.",
            "name": "redirect_uris",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Scopes",
            "description": "Space separated list of scopes.\n\nIf no scopes are provided, defaults to `read`.",
            "name": "scopes",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Website",
            "description": "A URL to the web page of the app (optional).",
            "name": "website",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly-created application.",
            "schema": {
              "$ref": "#/definitions/application"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/blocks": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:blocks"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/blocks?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/blocks?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "blocks"
        ],
        "summary": "Get an array of accounts that requesting account has blocked.",
        "operationId": "blocksGet",
        "parameters": [
          {
            "type": "string",
            "description": "Return only blocked accounts *OLDER* than the given max ID. The blocked account with the specified ID will not be included in the response. NOTE: the ID is of the internal block, NOT any of the returned accounts.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only blocked accounts *NEWER* than the given since ID. The blocked account with the specified ID will not be included in the response. NOTE: the ID is of the internal block, NOT any of the returned accounts.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only blocked accounts *IMMEDIATELY NEWER* than the given min ID. The blocked account with the specified ID will not be included in the response. NOTE: the ID is of the internal block, NOT any of the returned accounts.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of blocked accounts to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/bookmarks": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:bookmarks"
            ]
          }
        ],
        "description": "Get an array of statuses bookmarked in the instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "bookmarks"
        ],
        "operationId": "bookmarksGet",
        "parameters": [
          {
            "type": "integer",
            "default": 30,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only bookmarked statuses *OLDER* than the given bookmark ID. The status with the corresponding bookmark ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only bookmarked statuses *NEWER* than the given bookmark ID. The status with the corresponding bookmark ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of bookmarked statuses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/conversations": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "NOT IMPLEMENTED YET: Will currently always return an array of length 0.\n\nThe next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/conversations?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/conversations?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "conversations"
        ],
        "summary": "Get an array of (direct message) conversations that requesting account is involved in.",
        "operationId": "conversationsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Return only conversations *OLDER* than the given max ID. The conversation with the specified ID will not be included in the response. NOTE: the ID is of the internal conversation, use the Link header for pagination.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only conversations *NEWER* than the given since ID. The conversation with the specified ID will not be included in the response. NOTE: the ID is of the internal conversation, use the Link header for pagination.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only conversations *IMMEDIATELY NEWER* than the given min ID. The conversation with the specified ID will not be included in the response. NOTE: the ID is of the internal conversation, use the Link header for pagination.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of conversations to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conversation"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/custom_emojis": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:custom_emojis"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "custom_emojis"
        ],
        "summary": "Get an array of custom emojis available on the instance.",
        "operationId": "customEmojisGet",
        "responses": {
          "200": {
            "description": "Array of custom emojis.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/emoji"
              }
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/favourites": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:favourites"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/favourites?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/favourites?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "favourites"
        ],
        "summary": "Get an array of statuses that the requesting account has favourited.",
        "operationId": "favouritesGet",
        "parameters": [
          {
            "type": "integer",
            "default": 20,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only favourited statuses *OLDER* than the given favourite ID. The status with the corresponding fave ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only favourited statuses *NEWER* than the given favourite ID. The status with the corresponding fave ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/featured_tags": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "description": "THIS ENDPOINT IS CURRENTLY NOT FULLY IMPLEMENTED: it will always return an empty array.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "featured_tags"
        ],
        "summary": "Get an array of all hashtags that you currently have featured on your profile.",
        "operationId": "getFeaturedTags",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/filters": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:filters"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "filters"
        ],
        "summary": "Get all filters for the authenticated account.",
        "operationId": "filtersV1Get",
        "responses": {
          "200": {
            "description": "Requested filters.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/filterV1"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:filters"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "filters"
        ],
        "summary": "Create a single filter.",
        "operationId": "filterV1Post",
        "parameters": [
          {
            "maxLength": 40,
            "type": "string",
            "description": "The text to be filtered.\n\nSample: fnord",
            "name": "phrase",
            "in": "formData",
            "required": true
          },
          {
            "minItems": 1,
            "uniqueItems": true,
            "enum": [
              "home",
              "notifications",
              "public",
              "thread",
              "account"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The contexts in which the filter should be applied.\n\nSample: home, public",
            "name": "context[]",
            "in": "formData",
            "required": true
          },
          {
            "type": "number",
            "description": "Number of seconds from now that the filter should expire. If omitted, filter never expires.\n\nSample: 86400",
            "name": "expires_in",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Should matching entities be removed from the user's timelines/views, instead of hidden? Not supported yet.\n\nSample: false",
            "name": "irreversible",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Should the filter consider word boundaries?\n\nSample: true",
            "name": "whole_word",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "New filter.",
            "schema": {
              "$ref": "#/definitions/filterV1"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "unprocessable content"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/filters/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:filters"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "filters"
        ],
        "summary": "Get a single filter with the given ID.",
        "operationId": "filterV1Get",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the filter",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Requested filter.",
            "schema": {
              "$ref": "#/definitions/filterV1"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:filters"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "filters"
        ],
        "summary": "Update a single filter with the given ID.",
        "operationId": "filterV1Put",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the filter.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 40,
            "type": "string",
            "description": "The text to be filtered.\n\nSample: fnord",
            "name": "phrase",
            "in": "formData",
            "required": true
          },
          {
            "minItems": 1,
            "uniqueItems": true,
            "enum": [
              "home",
              "notifications",
              "public",
              "thread",
              "account"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The contexts in which the filter should be applied.\n\nSample: home, public",
            "name": "context[]",
            "in": "formData",
            "required": true
          },
          {
            "type": "number",
            "description": "Number of seconds from now that the filter should expire. If omitted, filter never expires.\n\nSample: 86400",
            "name": "expires_in",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Should matching entities be removed from the user's timelines/views, instead of hidden? Not supported yet.\n\nSample: false",
            "name": "irreversible",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Should the filter consider word boundaries?\n\nSample: true",
            "name": "whole_word",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated filter.",
            "schema": {
              "$ref": "#/definitions/filterV1"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "unprocessable content"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:filters"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "filters"
        ],
        "summary": "Delete a single filter with the given ID.",
        "operationId": "filterV1Delete",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "filter deleted"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/follow_requests": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:follows"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/follow_requests?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/follow_requests?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "follow_requests"
        ],
        "summary": "Get an array of accounts that have requested to follow you.",
        "operationId": "getFollowRequests",
        "parameters": [
          {
            "type": "string",
            "description": "Return only follow requesting accounts *OLDER* than the given max ID. The follow requester with the specified ID will not be included in the response. NOTE: the ID is of the internal follow request, NOT any of the returned accounts.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only follow requesting accounts *NEWER* than the given since ID. The follow requester with the specified ID will not be included in the response. NOTE: the ID is of the internal follow request, NOT any of the returned accounts.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only follow requesting accounts *IMMEDIATELY NEWER* than the given min ID. The follow requester with the specified ID will not be included in the response. NOTE: the ID is of the internal follow request, NOT any of the returned accounts.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of follow requesting accounts to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/follow_requests/{account_id}/authorize": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:follows"
            ]
          }
        ],
        "description": "Accept a follow request and put the requesting account in your 'followers' list.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "follow_requests"
        ],
        "summary": "Accept/authorize follow request from the given account ID.",
        "operationId": "authorizeFollowRequest",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account requesting to follow you.",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to this account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/follow_requests/{account_id}/reject": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:follows"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "follow_requests"
        ],
        "summary": "Reject/deny follow request from the given account ID.",
        "operationId": "rejectFollowRequest",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the account requesting to follow you.",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Your relationship to this account.",
            "schema": {
              "$ref": "#/definitions/accountRelationship"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/instance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "instance"
        ],
        "summary": "View instance information.",
        "operationId": "instanceGetV1",
        "responses": {
          "200": {
            "description": "Instance information.",
            "schema": {
              "$ref": "#/definitions/instanceV1"
            }
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal error"
          }
        }
      },
      "patch": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "This requires admin permissions on the instance.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "instance"
        ],
        "summary": "Update your instance information and/or upload a new avatar/header for the instance.",
        "operationId": "instanceUpdate",
        "parameters": [
          {
            "maxLength": 40,
            "type": "string",
            "description": "Title to use for the instance.",
            "name": "title",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "type": "string",
            "description": "Username of the contact account. This must be the username of an instance admin.",
            "name": "contact_username",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "type": "string",
            "description": "Email address to use as the instance contact.",
            "name": "contact_email",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "maxLength": 500,
            "type": "string",
            "description": "Short description of the instance.",
            "name": "short_description",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "maxLength": 5000,
            "type": "string",
            "description": "Longer description of the instance.",
            "name": "description",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "maxLength": 5000,
            "type": "string",
            "description": "Terms and conditions of the instance.",
            "name": "terms",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "type": "file",
            "description": "Thumbnail image to use for the instance.",
            "name": "thumbnail",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Image description of the submitted instance thumbnail.",
            "name": "thumbnail_description",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "Header image to use for the instance.",
            "name": "header",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly updated instance.",
            "schema": {
              "$ref": "#/definitions/instanceV1"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/instance/peers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "instance"
        ],
        "operationId": "instancePeersGet",
        "parameters": [
          {
            "type": "string",
            "default": "open",
            "description": "Comma-separated list of filters to apply to results. Recognized filters are:\n  - `open` -- include peers that are not suspended or silenced\n  - `suspended` -- include peers that have been suspended.\n\nIf filter is `open`, only instances that haven't been suspended or silenced will be returned.\n\nIf filter is `suspended`, only suspended instances will be shown.\n\nIf filter is `open,suspended`, then all known instances will be returned.\n\nIf filter is an empty string or not set, then `open` will be assumed as the default.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "If no filter parameter is provided, or filter is empty, then a legacy, Mastodon-API compatible response will be returned. This will consist of just a 'flat' array of strings like `[\"example.com\", \"example.org\"]`, which corresponds to domains this instance peers with.\n\nIf a filter parameter is provided, then an array of objects with at least a `domain` key set on each object will be returned.\n\nDomains that are silenced or suspended will also have a key `suspended_at` or `silenced_at` that contains an iso8601 date string. If one of these keys is not present on the domain object, it is open. Suspended instances may in some cases be obfuscated, which means they will have some letters replaced by `*` to make it more difficult for bad actors to target instances with harassment.\n\nWhether a flat response or a more detailed response is returned, domains will be sorted alphabetically by hostname.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/domain"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/instance/rules": {
      "get": {
        "description": "The rules will be returned in order (sorted by Order ascending).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "instance"
        ],
        "summary": "View instance rules (public).",
        "operationId": "rules",
        "responses": {
          "200": {
            "description": "An array with all the rules for the local instance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/instanceRule"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/lists": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Get all lists for owned by authorized user.",
        "operationId": "lists",
        "responses": {
          "200": {
            "description": "Array of all lists owned by the requesting user.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/list"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:lists"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Create a new list.",
        "operationId": "listCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Title",
            "description": "Title of this list.\nSample: Cool People",
            "name": "title",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "default": "list",
            "x-go-name": "RepliesPolicy",
            "description": "RepliesPolicy for this list.\nfollowed = Show replies to any followed user\nlist = Show replies to members of the list\nnone = Show replies to no one\nSample: list",
            "name": "replies_policy",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created list.",
            "schema": {
              "$ref": "#/definitions/list"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/lists/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Get a single list with the given ID.",
        "operationId": "list",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Requested list.",
            "schema": {
              "$ref": "#/definitions/list"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:lists"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Update an existing list.",
        "operationId": "listUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Title of this list.\nSample: Cool People",
            "name": "title",
            "in": "formData"
          },
          {
            "enum": [
              "followed",
              "list",
              "none"
            ],
            "type": "string",
            "description": "RepliesPolicy for this list.\nfollowed = Show replies to any followed user\nlist = Show replies to members of the list\nnone = Show replies to no one\nSample: list",
            "name": "replies_policy",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly updated list.",
            "schema": {
              "$ref": "#/definitions/list"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:lists"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Delete a single list with the given ID.",
        "operationId": "listDelete",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list deleted"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/lists/{id}/accounts": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "description": "The returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/list/01H0W619198FX7J54NF7EH1NG2/accounts?limit=20\u0026max_id=01FC3GSQ8A3MMJ43BPZSGEG29M\u003e; rel=\"next\", \u003chttps://example.org/api/v1/list/01H0W619198FX7J54NF7EH1NG2/accounts?limit=20\u0026min_id=01FC3KJW2GYXSDDRA6RWNDM46M\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Page through accounts in this list.",
        "operationId": "listAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Return only list entries *OLDER* than the given max ID. The account from the list entry with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only list entries *NEWER* than the given since ID. The account from the list entry with the specified ID will not be included in the response.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only list entries *IMMEDIATELY NEWER* than the given min ID. The account from the list entry with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 0,
            "type": "integer",
            "default": 40,
            "description": "Number of accounts to return. If set to 0 explicitly, all accounts in the list will be returned, and pagination headers will not be used. This is a workaround for Mastodon API peculiarities: https://docs.joinmastodon.org/methods/lists/#query-parameters.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Add one or more accounts to the given list.",
        "operationId": "addListAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Array of accountIDs to modify. Each accountID must correspond to an account that the requesting account follows.",
            "name": "account_ids[]",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list accounts updated"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "lists"
        ],
        "summary": "Remove one or more accounts from the given list.",
        "operationId": "removeListAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Array of accountIDs to modify. Each accountID must correspond to an account that the requesting account follows.",
            "name": "account_ids[]",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list accounts updated"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/markers": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "Get timeline markers by name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "markers"
        ],
        "operationId": "markersGet",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "home",
                "notifications"
              ],
              "type": "string"
            },
            "description": "Timelines to retrieve.",
            "name": "timeline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested markers",
            "schema": {
              "$ref": "#/definitions/markers"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "description": "Update timeline markers by name",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "markers"
        ],
        "operationId": "markersPost",
        "parameters": [
          {
            "type": "string",
            "description": "Last status ID read on the home timeline.",
            "name": "home[last_read_id]",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Last notification ID read on the notifications timeline.",
            "name": "notifications[last_read_id]",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested markers",
            "schema": {
              "$ref": "#/definitions/markers"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "409": {
            "description": "conflict (when two clients try to update the same timeline at the same time)"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/media/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:media"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "media"
        ],
        "summary": "Get a media attachment that you own.",
        "operationId": "mediaGet",
        "parameters": [
          {
            "type": "string",
            "description": "id of the attachment",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested media attachment.",
            "schema": {
              "$ref": "#/definitions/attachment"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:media"
            ]
          }
        ],
        "description": "You must own the media attachment, and the attachment must not yet be attached to a status.\n\nThe parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "media"
        ],
        "summary": "Update a media attachment.",
        "operationId": "mediaUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "id of the attachment to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Image or media description to use as alt-text on the attachment. This is very useful for users of screenreaders! May or may not be required, depending on your instance settings.",
            "name": "description",
            "in": "formData",
            "allowEmptyValue": true
          },
          {
            "type": "string",
            "default": "0,0",
            "description": "Focus of the media file. If present, it should be in the form of two comma-separated floats between -1 and 1. For example: `-0.5,0.25`.",
            "name": "focus",
            "in": "formData",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly-updated media attachment.",
            "schema": {
              "$ref": "#/definitions/attachment"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/mutes": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:mutes"
            ]
          }
        ],
        "description": "NOT IMPLEMENTED YET: Will currently always return an array of length 0.\n\nThe next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/mutes?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/mutes?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mutes"
        ],
        "summary": "Get an array of accounts that requesting account has muted.",
        "operationId": "mutesGet",
        "parameters": [
          {
            "type": "string",
            "description": "Return only muted accounts *OLDER* than the given max ID. The muted account with the specified ID will not be included in the response. NOTE: the ID is of the internal mute, NOT any of the returned accounts.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only muted accounts *NEWER* than the given since ID. The muted account with the specified ID will not be included in the response. NOTE: the ID is of the internal mute, NOT any of the returned accounts.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only muted accounts *IMMEDIATELY NEWER* than the given min ID. The muted account with the specified ID will not be included in the response. NOTE: the ID is of the internal mute, NOT any of the returned accounts.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 80,
            "minimum": 1,
            "type": "integer",
            "default": 40,
            "description": "Number of muted accounts to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/notification/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:notifications"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Get a single notification with the given ID.",
        "operationId": "notification",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the notification.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Requested notification.",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/notifications": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:notifications"
            ]
          }
        ],
        "description": "The notifications will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v1/notifications?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/notifications?limit=80\u0026since_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Get notifications for currently authorized user.",
        "operationId": "notifications",
        "parameters": [
          {
            "type": "string",
            "description": "Return only notifications *OLDER* than the given max notification ID. The notification with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only notifications *newer* than the given since notification ID. The notification with the specified ID will not be included in the response.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only notifications *immediately newer* than the given since notification ID. The notification with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Number of notifications to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "exclude_types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of notifications.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notification"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/notifications/clear": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:notifications"
            ]
          }
        ],
        "description": "Will return an empty object `{}` to indicate success.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Clear/delete all notifications for currently authorized user.",
        "operationId": "clearNotifications",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/polls/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "polls"
        ],
        "summary": "View poll with given ID.",
        "operationId": "poll",
        "parameters": [
          {
            "type": "string",
            "description": "Target poll ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested poll.",
            "schema": {
              "$ref": "#/definitions/poll"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/polls/{id}/vote": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "polls"
        ],
        "summary": "Vote with choices in the given poll.",
        "operationId": "pollVote",
        "parameters": [
          {
            "type": "string",
            "description": "Target poll ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Poll choice indices on which to vote.",
            "name": "choices",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The updated poll with user vote choices.",
            "schema": {
              "$ref": "#/definitions/poll"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/preferences": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "description": "Example:\n\n```\n\n{\n\"posting:default:visibility\": \"public\",\n\"posting:default:sensitive\": false,\n\"posting:default:language\": \"en\",\n\"reading:expand:media\": \"default\",\n\"reading:expand:spoilers\": false,\n\"reading:autoplay:gifs\": false\n}\n\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "preferences"
        ],
        "summary": "Return an object of user preferences.",
        "operationId": "preferencesGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/reports": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:reports"
            ]
          }
        ],
        "description": "The reports will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe next and previous queries can be parsed from the returned Link header.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/reports?limit=20\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v1/reports?limit=20\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "reports"
        ],
        "summary": "See reports created by the requesting account.",
        "operationId": "reports",
        "parameters": [
          {
            "type": "boolean",
            "description": "If set to true, only resolved reports will be returned. If false, only unresolved reports will be returned. If unset, reports will not be filtered on their resolved status.",
            "name": "resolved",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports that target the given account id.",
            "name": "target_account_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports *OLDER* than the given max ID. The report with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports *NEWER* than the given since ID. The report with the specified ID will not be included in the response. This parameter is functionally equivalent to min_id.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only reports *NEWER* than the given min ID. The report with the specified ID will not be included in the response. This parameter is functionally equivalent to since_id.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Number of reports to return. If less than 1, will be clamped to 1. If more than 100, will be clamped to 100.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of reports.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/report"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:reports"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "reports"
        ],
        "summary": "Create a new user report with the given parameters.",
        "operationId": "reportCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AccountID",
            "description": "ID of the account to report.\nSample: 01GPE75FXSH2EGFBF85NXPH3KP",
            "name": "account_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "StatusIDs",
            "description": "IDs of statuses to attach to the report to provide additional context.\nSample: [\"01GPE76N4SBVRZ8K24TW51ZZQ4\",\"01GPE76WN9JZE62EPT3Q9FRRD4\"]",
            "name": "status_ids",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Comment",
            "description": "The reason for the report. Default maximum of 1000 characters.\nSample: Anti-Blackness, transphobia.",
            "name": "comment",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "x-go-name": "Forward",
            "description": "If the account is remote, should the report be forwarded to the remote admin?\nSample: true",
            "name": "forward",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "other",
            "x-go-name": "Category",
            "description": "Specify if the report is due to spam, violation of enumerated instance rules, or some other reason.\nCurrently only 'other' is supported.\nSample: other",
            "name": "category",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "RuleIDs",
            "description": "IDs of rules on this instance which have been broken according to the reporter.\nSample: [\"01GPBN5YDY6JKBWE44H7YQBDCQ\",\"01GPBN65PDWSBPWVDD0SQCFFY3\"]",
            "name": "rule_ids",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The created report.",
            "schema": {
              "$ref": "#/definitions/report"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/reports/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:reports"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "reports"
        ],
        "summary": "Get one report with the given id.",
        "operationId": "reportGet",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the report",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested report.",
            "schema": {
              "$ref": "#/definitions/report"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "description": "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Create a new status.",
        "operationId": "statusCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Status",
            "description": "Text content of the status.\nIf media_ids is provided, this becomes optional.\nAttaching a poll is optional while status is provided.",
            "name": "status",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MediaIDs",
            "description": "Array of Attachment ids to be attached as media.\nIf provided, status becomes optional, and poll cannot be used.\n\nIf the status is being submitted as a form, the key is 'media_ids[]',\nbut if it's json or xml, the key is 'media_ids'.",
            "name": "media_ids",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PollOptions",
            "description": "Array of possible poll answers.\nIf provided, media_ids cannot be used, and poll[expires_in] must be provided.",
            "name": "poll[options][]",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PollExpiresIn",
            "description": "Duration the poll should be open, in seconds.\nIf provided, media_ids cannot be used, and poll[options] must be provided.",
            "name": "poll[expires_in]",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "x-go-name": "PollMultiple",
            "description": "Allow multiple choices on this poll.",
            "name": "poll[multiple]",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "PollHideTotals",
            "description": "Hide vote counts until the poll ends.",
            "name": "poll[hide_totals]",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "InReplyToID",
            "description": "ID of the status being replied to, if status is a reply.",
            "name": "in_reply_to_id",
            "in": "formData"
          },
          {
            "type": "boolean",
            "x-go-name": "Sensitive",
            "description": "Status and attached media should be marked as sensitive.",
            "name": "sensitive",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "SpoilerText",
            "description": "Text to be shown as a warning or subject before the actual content.\nStatuses are generally collapsed behind this field.",
            "name": "spoiler_text",
            "in": "formData"
          },
          {
            "enum": [
              "public",
              "unlisted",
              "private",
              "mutuals_only",
              "direct"
            ],
            "type": "string",
            "x-go-name": "Visibility",
            "description": "Visibility of the posted status.",
            "name": "visibility",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "ScheduledAt",
            "description": "ISO 8601 Datetime at which to schedule a status.\nProviding this parameter will cause ScheduledStatus to be returned instead of Status.\nMust be at least 5 minutes in the future.\n\nThis feature isn't implemented yet.",
            "name": "scheduled_at",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Language",
            "description": "ISO 639 language code for this status.",
            "name": "language",
            "in": "formData"
          },
          {
            "enum": [
              "text/plain",
              "text/markdown"
            ],
            "type": "string",
            "x-go-name": "ContentType",
            "description": "Content type to use when parsing this status.",
            "name": "content_type",
            "in": "formData"
          },
          {
            "type": "boolean",
            "x-go-name": "Federated",
            "description": "This status will be federated beyond the local timeline(s).",
            "name": "federated",
            "in": "formData"
          },
          {
            "type": "boolean",
            "x-go-name": "Boostable",
            "description": "This status can be boosted/reblogged.",
            "name": "boostable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "x-go-name": "Replyable",
            "description": "This status can be replied to.",
            "name": "replyable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "x-go-name": "Likeable",
            "description": "This status can be liked/faved.",
            "name": "likeable",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "View status with the given ID.",
        "operationId": "statusGet",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "description": "The deleted status will be returned in the response. The `text` field will contain the original text of the status as it was submitted.\nThis is useful when doing a 'delete and redraft' type operation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Delete status with the given ID. The status must belong to you.",
        "operationId": "statusDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The status that was just deleted.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/bookmark": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Bookmark status with the given ID.",
        "operationId": "statusBookmark",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/context": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "The returned statuses will be ordered in a thread structure, so they are suitable to be displayed in the order in which they were returned.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Return ancestors and descendants of the given status.",
        "operationId": "statusContext",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status context object.",
            "schema": {
              "$ref": "#/definitions/statusContext"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/favourite": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Star/like/favourite the given status, if permitted.",
        "operationId": "statusFave",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly faved status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/favourited_by": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "View accounts that have faved/starred/liked the target status.",
        "operationId": "statusFavedBy",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/history": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "UNIMPLEMENTED: Currently this endpoint will always return an array of length 1, containing only the latest/current version of the status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "View edit history of status with the given ID.",
        "operationId": "statusHistoryGet",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/statusEdit"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/mute": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:mutes"
            ]
          }
        ],
        "description": "Target status must belong to you or mention you.\n\nStatus thread mutes and unmutes are idempotent. If you already mute a thread, muting it again just means it stays muted and you'll get 200 OK back.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Mute a status's thread. This prevents notifications from being created for future replies, likes, boosts etc in the thread of which the target status is a part.",
        "operationId": "statusMute",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The now-muted status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request; you're not part of the target status thread"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/pin": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "description": "You can only pin original posts (not reblogs) that you authored yourself.\n\nSupported privacy levels for pinned posts are public, unlisted, and private/followers-only,\nbut only public posts will appear on the web version of your profile.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Pin a status to the top of your profile, and add it to your Featured ActivityPub collection.",
        "operationId": "statusPin",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/reblog": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "description": "If the target status is rebloggable/boostable, it will be shared with your followers.\nThis is equivalent to an ActivityPub 'Announce' activity.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Reblog/boost status with the given ID.",
        "operationId": "statusReblog",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The boost of the status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/reblogged_by": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "View accounts that have reblogged/boosted the target status.",
        "operationId": "statusBoostedBy",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/source": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "View source text of status with the given ID. Requester must own the status.",
        "operationId": "statusSourceGet",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/statusSource"
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/unbookmark": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Unbookmark status with the given ID.",
        "operationId": "statusUnbookmark",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/unfavourite": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Unstar/unlike/unfavourite the given status.",
        "operationId": "statusUnfave",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The unfaved status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/unmute": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:mutes"
            ]
          }
        ],
        "description": "Target status must belong to you or mention you.\n\nStatus thread mutes and unmutes are idempotent. If you already unmuted a thread, unmuting it again just means it stays unmuted and you'll get 200 OK back.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Unmute a status's thread. This reenables notifications for future replies, likes, boosts etc in the thread of which the target status is a part.",
        "operationId": "statusUnmute",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The now-unmuted status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request; you're not part of the target status thread"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/unpin": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:accounts"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Unpin one of your pinned statuses.",
        "operationId": "statusUnpin",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/statuses/{id}/unreblog": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:statuses"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statuses"
        ],
        "summary": "Unreblog/unboost status with the given ID.",
        "operationId": "statusUnreblog",
        "parameters": [
          {
            "type": "string",
            "description": "Target status ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The unboosted status.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v1/streaming": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:streaming"
            ]
          }
        ],
        "description": "The scheme used should *always* be `wss`. The streaming basepath can be viewed at `/api/v1/instance`.\n\nOn a successful connection, a code `101` will be returned, which indicates that the connection is being upgraded to a secure websocket connection.\n\nAs long as the connection is open, various message types will be streamed into it.\n\nGoToSocial will ping the connection every 30 seconds to check whether the client is still receiving.\n\nIf the ping fails, or something else goes wrong during transmission, then the connection will be dropped, and the client will be expected to start it again.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "wss"
        ],
        "tags": [
          "streaming"
        ],
        "summary": "Initiate a websocket connection for live streaming of statuses and notifications.",
        "operationId": "streamGet",
        "parameters": [
          {
            "type": "string",
            "description": "Access token for the requesting account.",
            "name": "access_token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Type of stream to request.\n\nOptions are:\n\n`user`: receive updates for the account's home timeline.\n`public`: receive updates for the public timeline.\n`public:local`: receive updates for the local timeline.\n`hashtag`: receive updates for a given hashtag.\n`hashtag:local`: receive local updates for a given hashtag.\n`list`: receive updates for a certain list of accounts.\n`direct`: receive updates for direct messages.",
            "name": "stream",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of the list to subscribe to.\nOnly used if stream type is 'list'.",
            "name": "list",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the tag to subscribe to.\nOnly used if stream type is 'hashtag' or 'hashtag:local'.",
            "name": "tag",
            "in": "query"
          }
        ],
        "responses": {
          "101": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "description": "The type of event being received.\n\n`update`: a new status has been received.\n`notification`: a new notification has been received.\n`delete`: a status has been deleted.\n`filters_changed`: not implemented.",
                  "type": "string",
                  "enum": [
                    "update",
                    "notification",
                    "delete",
                    "filters_changed"
                  ]
                },
                "payload": {
                  "description": "The payload of the streamed message.\nDifferent depending on the `event` type.\n\nIf present, it should be parsed as a string.\n\nIf `event` = `update`, then the payload will be a JSON string of a status.\nIf `event` = `notification`, then the payload will be a JSON string of a notification.\nIf `event` = `delete`, then the payload will be a status ID.",
                  "type": "string",
                  "example": "{\"id\":\"01FC3TZ5CFG6H65GCKCJRKA669\",\"created_at\":\"2021-08-02T16:25:52Z\",\"sensitive\":false,\"spoiler_text\":\"\",\"visibility\":\"public\",\"language\":\"en\",\"uri\":\"https://gts.superseriousbusiness.org/users/dumpsterqueer/statuses/01FC3TZ5CFG6H65GCKCJRKA669\",\"url\":\"https://gts.superseriousbusiness.org/@dumpsterqueer/statuses/01FC3TZ5CFG6H65GCKCJRKA669\",\"replies_count\":0,\"reblogs_count\":0,\"favourites_count\":0,\"favourited\":false,\"reblogged\":false,\"muted\":false,\"bookmarked\":fals…//gts.superseriousbusiness.org/fileserver/01JNN207W98SGG3CBJ76R5MVDN/header/original/019036W043D8FXPJKSKCX7G965.png\",\"header_static\":\"https://gts.superseriousbusiness.org/fileserver/01JNN207W98SGG3CBJ76R5MVDN/header/small/019036W043D8FXPJKSKCX7G965.png\",\"followers_count\":33,\"following_count\":28,\"statuses_count\":126,\"last_status_at\":\"2021-08-02T16:25:52Z\",\"emojis\":[],\"fields\":[]},\"media_attachments\":[],\"mentions\":[],\"tags\":[],\"emojis\":[],\"card\":null,\"poll\":null,\"text\":\"a\"}"
                },
                "stream": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "user",
                      "public",
                      "public:local",
                      "hashtag",
                      "hashtag:local",
                      "list",
                      "direct"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/api/v1/timelines/home": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/timelines/home?limit=20\u0026max_id=01FC3GSQ8A3MMJ43BPZSGEG29M\u003e; rel=\"next\", \u003chttps://example.org/api/v1/timelines/home?limit=20\u0026min_id=01FC3KJW2GYXSDDRA6RWNDM46M\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "timelines"
        ],
        "summary": "See statuses/posts by accounts you follow.",
        "operationId": "homeTimeline",
        "parameters": [
          {
            "type": "string",
            "description": "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *newer* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *immediately newer* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Show only statuses posted by local accounts.",
            "name": "local",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of statuses.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/api/v1/timelines/list/{id}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:lists"
            ]
          }
        ],
        "description": "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/timelines/list/01H0W619198FX7J54NF7EH1NG2?limit=20\u0026max_id=01FC3GSQ8A3MMJ43BPZSGEG29M\u003e; rel=\"next\", \u003chttps://example.org/api/v1/timelines/list/01H0W619198FX7J54NF7EH1NG2?limit=20\u0026min_id=01FC3KJW2GYXSDDRA6RWNDM46M\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "timelines"
        ],
        "summary": "See statuses/posts from the given list timeline.",
        "operationId": "listTimeline",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the list",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of statuses.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/api/v1/timelines/public": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/timelines/public?limit=20\u0026max_id=01FC3GSQ8A3MMJ43BPZSGEG29M\u003e; rel=\"next\", \u003chttps://example.org/api/v1/timelines/public?limit=20\u0026min_id=01FC3KJW2GYXSDDRA6RWNDM46M\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "timelines"
        ],
        "summary": "See public statuses/posts that your instance is aware of.",
        "operationId": "publicTimeline",
        "parameters": [
          {
            "type": "string",
            "description": "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Show only statuses posted by local accounts.",
            "name": "local",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of statuses.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/api/v1/timelines/tag/{tag_name}": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:statuses"
            ]
          }
        ],
        "description": "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).\n\nThe returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.\n\nExample:\n\n```\n\u003chttps://example.org/api/v1/timelines/tag/example?limit=20\u0026max_id=01FC3GSQ8A3MMJ43BPZSGEG29M\u003e; rel=\"next\", \u003chttps://example.org/api/v1/timelines/tag/example?limit=20\u0026min_id=01FC3KJW2GYXSDDRA6RWNDM46M\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "timelines"
        ],
        "summary": "See public statuses that use the given hashtag (case insensitive).",
        "operationId": "tagTimeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the tag",
            "name": "tag_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *newer* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only statuses *immediately newer* than the given since status ID. The status with the specified ID will not be included in the response.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 40,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "description": "Number of statuses to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of statuses.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/api/v1/user/password_change": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:user"
            ]
          }
        ],
        "description": "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.\nThe parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Change the password of authenticated user.",
        "operationId": "userPasswordChange",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "OldPassword",
            "description": "User's previous password.",
            "name": "old_password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NewPassword",
            "description": "Desired new password.\nIf the password does not have high enough entropy, it will be rejected.\nSee https://github.com/wagslane/go-password-validator",
            "name": "new_password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change successful"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/api/v2/admin/accounts": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "admin"
            ]
          }
        ],
        "description": "The next and previous queries can be parsed from the returned Link header.\nExample:\n\n```\n\u003chttps://example.org/api/v2/admin/accounts?limit=80\u0026max_id=01FC0SKA48HNSVR6YKZCQGS2V8\u003e; rel=\"next\", \u003chttps://example.org/api/v2/admin/accounts?limit=80\u0026min_id=01FC0SKW5JK2Q4EVAV2B462YY0\u003e; rel=\"prev\"\n````",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "View + page through known accounts according to given filters.",
        "operationId": "adminAccountsGetV2",
        "parameters": [
          {
            "type": "string",
            "description": "Filter for `local` or `remote` accounts.",
            "name": "origin",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter for `active`, `pending`, `disabled`, `silenced`, or `suspended` accounts.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter for accounts with staff permissions (users that can manage reports).",
            "name": "permissions",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter for users with these roles.",
            "name": "role_ids[]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Lookup users invited by the account with this ID.",
            "name": "invited_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search for the given username.",
            "name": "username",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search for the given display name.",
            "name": "display_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by the given domain.",
            "name": "by_domain",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Lookup a user with this email.",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Lookup users with this IP address.",
            "name": "ip",
            "in": "query"
          },
          {
            "type": "string",
            "description": "All results returned will be older than the item with this ID.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "All results returned will be newer than the item with this ID.",
            "name": "since_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Returns results immediately newer than the item with this ID.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "default": 100,
            "description": "Maximum number of results to return.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminAccountInfo"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Links to the next and previous queries."
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/v2/instance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "instance"
        ],
        "summary": "View instance information.",
        "operationId": "instanceGetV2",
        "responses": {
          "200": {
            "description": "Instance information.",
            "schema": {
              "$ref": "#/definitions/instanceV2"
            }
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/api/{api_version}/media": {
      "post": {
        "security": [
          {
            "OAuth2 Bearer": [
              "write:media"
            ]
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "media"
        ],
        "summary": "Upload a new media attachment.",
        "operationId": "mediaCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Version of the API to use. Must be either `v1` or `v2`.",
            "name": "api_version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Image or media description to use as alt-text on the attachment. This is very useful for users of screenreaders! May or may not be required, depending on your instance settings.",
            "name": "description",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "0,0",
            "description": "Focus of the media file. If present, it should be in the form of two comma-separated floats between -1 and 1. For example: `-0.5,0.25`.",
            "name": "focus",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "The media attachment to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly-created media attachment.",
            "schema": {
              "$ref": "#/definitions/attachment"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/api/{api_version}/search": {
      "get": {
        "security": [
          {
            "OAuth2 Bearer": [
              "read:search"
            ]
          }
        ],
        "description": "If statuses are in the result, they will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "summary": "Search for statuses, accounts, or hashtags, on this instance or elsewhere.",
        "operationId": "searchGet",
        "parameters": [
          {
            "type": "string",
            "description": "Version of the API to use. Must be either `v1` or `v2`. If v1 is used, Hashtag results will be a slice of strings. If v2 is used, Hashtag results will be a slice of apimodel tags.",
            "name": "api_version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Return only items *OLDER* than the given max ID. The item with the specified ID will not be included in the response. Currently only used if 'type' is set to a specific type.",
            "name": "max_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Return only items *immediately newer* than the given min ID. The item with the specified ID will not be included in the response. Currently only used if 'type' is set to a specific type.",
            "name": "min_id",
            "in": "query"
          },
          {
            "maximum": 40,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "description": "Number of each type of item to return.",
            "name": "limit",
            "in": "query"
          },
          {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Page number of results to return (starts at 0). This parameter is currently not used, page by selecting a specific query type and using maxID and minID instead.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to search for. This can be in the following forms:\n- `@[username]` -- search for an account with the given username on any domain. Can return multiple results.\n- @[username]@[domain]` -- search for a remote account with exact username and domain. Will only ever return 1 result at most.\n- `https://example.org/some/arbitrary/url` -- search for an account OR a status with the given URL. Will only ever return 1 result at most.\n- `#[hashtag_name]` -- search for a hashtag with the given hashtag name, or starting with the given hashtag name. Case insensitive. Can return multiple results.\n- any arbitrary string -- search for accounts or statuses containing the given string. Can return multiple results.",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Type of item to return. One of:\n- `` -- empty string; return any/all results.\n- `accounts` -- return only account(s).\n- `statuses` -- return only status(es).\n- `hashtags` -- return only hashtag(s).\nIf `type` is specified, paging can be performed using max_id and min_id parameters.\nIf `type` is not specified, see the `offset` parameter for paging.",
            "name": "type",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If searching query is for `@[username]@[domain]`, or a URL, allow the GoToSocial instance to resolve the search by making calls to remote instances (webfinger, ActivityPub, etc).",
            "name": "resolve",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If search type includes accounts, and search query is an arbitrary string, show only accounts that the requesting account follows. If this is set to `true`, then the GoToSocial instance will enhance the search by also searching within account notes, not just in usernames and display names.",
            "name": "following",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If searching for hashtags, exclude those not yet approved by instance admin. Currently this parameter is unused.",
            "name": "exclude_unreviewed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Results of the search.",
            "schema": {
              "$ref": "#/definitions/searchResult"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "406": {
            "description": "not acceptable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/livez": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Returns code 200 with no body if GoToSocial is \"live\", ie., able to respond to HTTP requests.",
        "operationId": "liveGet",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "head": {
        "tags": [
          "health"
        ],
        "summary": "Returns code 200 if GoToSocial is \"live\", ie., able to respond to HTTP requests.",
        "operationId": "liveHead",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/nodeinfo/2.0": {
      "get": {
        "description": "See: https://nodeinfo.diaspora.software/schema.html",
        "produces": [
          "application/json; profile=\"http://nodeinfo.diaspora.software/ns/schema/2.0#\""
        ],
        "tags": [
          "nodeinfo"
        ],
        "summary": "Returns a compliant nodeinfo response to node info queries.",
        "operationId": "nodeInfoGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/nodeinfo"
            }
          }
        }
      }
    },
    "/readyz": {
      "get": {
        "description": "If GtS is not ready, 500 Internal Error will be returned, and an error will be logged (but not returned to the caller, to avoid leaking internals).",
        "tags": [
          "health"
        ],
        "summary": "Returns code 200 with no body if GoToSocial is \"ready\", ie., able to connect to the database backend and do a simple SELECT.",
        "operationId": "readyGet",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Not ready. Check logs for error message."
          }
        }
      },
      "head": {
        "description": "If GtS is not ready, 500 Internal Error will be returned, and an error will be logged (but not returned to the caller, to avoid leaking internals).",
        "tags": [
          "health"
        ],
        "summary": "Returns code 200 with no body if GoToSocial is \"ready\", ie., able to connect to the database backend and do a simple SELECT.",
        "operationId": "readyHead",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/collections/featured": {
      "get": {
        "description": "The response will contain an ordered collection of Note URIs in the `items` property.\n\nIt is up to the caller to dereference the provided Note URIs (or not, if they already have them cached).\n\nHTTP signature is required on the request.",
        "produces": [
          "application/activity+json"
        ],
        "tags": [
          "s2s/federation"
        ],
        "summary": "Get the featured collection (pinned posts) for a user.",
        "operationId": "s2sFeaturedCollectionGet",
        "parameters": [
          {
            "type": "string",
            "description": "Account name of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/swaggerFeaturedCollection"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/users/{username}/outbox": {
      "get": {
        "description": "Note that the response will be a Collection with a page as `first`, as shown below, if `page` is `false`.\n\nIf `page` is `true`, then the response will be a single `CollectionPage` without the wrapping `Collection`.\n\nHTTP signature is required on the request.",
        "produces": [
          "application/activity+json"
        ],
        "tags": [
          "s2s/federation"
        ],
        "summary": "Get the public outbox collection for an actor.",
        "operationId": "s2sOutboxGet",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the account.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Return response as a CollectionPage.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum ID of the next status, used for paging.",
            "name": "min_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum ID of the next status, used for paging.",
            "name": "max_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/swaggerCollection"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/users/{username}/statuses/{status}/replies": {
      "get": {
        "description": "Note that the response will be a Collection with a page as `first`, as shown below, if `page` is `false`.\n\nIf `page` is `true`, then the response will be a single `CollectionPage` without the wrapping `Collection`.\n\nHTTP signature is required on the request.",
        "produces": [
          "application/activity+json"
        ],
        "tags": [
          "s2s/federation"
        ],
        "summary": "Get the replies collection for a status.",
        "operationId": "s2sRepliesGet",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the account.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of the status.",
            "name": "status",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Return response as a CollectionPage.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Return replies only from accounts other than the status owner.",
            "name": "only_other_accounts",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum ID of the next status, used for paging.",
            "name": "min_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/swaggerCollection"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    }
  },
  "definitions": {
    "InstanceConfigurationEmojis": {
      "type": "object",
      "title": "InstanceConfigurationEmojis models instance emoji config parameters.",
      "properties": {
        "emoji_size_limit": {
          "description": "Max allowed emoji image size in bytes.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EmojiSizeLimit",
          "example": 51200
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "Link": {
      "description": "See https://webfinger.net/ and https://www.rfc-editor.org/rfc/rfc6415.html#section-3.1",
      "type": "object",
      "title": "Link represents one 'link' in a slice of links returned from a lookup request.",
      "properties": {
        "href": {
          "type": "string",
          "x-go-name": "Href"
        },
        "rel": {
          "type": "string",
          "x-go-name": "Rel"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "Mention": {
      "type": "object",
      "title": "Mention represents a mention of another account.",
      "properties": {
        "acct": {
          "description": "The account URI as discovered via webfinger.\nEqual to username for local users, or username@domain for remote users.",
          "type": "string",
          "x-go-name": "Acct",
          "example": "some_user@example.org"
        },
        "id": {
          "description": "The ID of the mentioned account.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBYJHQWQZAVWFRK9PDYTKGMB"
        },
        "url": {
          "description": "The web URL of the mentioned account's profile.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/@some_user"
        },
        "username": {
          "description": "The username of the mentioned account.",
          "type": "string",
          "x-go-name": "Username",
          "example": "some_user"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "NodeInfoServices": {
      "type": "object",
      "title": "NodeInfoServices represents inbound and outbound services that this node offers connections to.",
      "properties": {
        "inbound": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Inbound"
        },
        "outbound": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Outbound"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "NodeInfoSoftware": {
      "type": "object",
      "title": "NodeInfoSoftware represents the name and version number of the software of this node.",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "gotosocial"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version",
          "example": "0.1.2 1234567"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "NodeInfoUsage": {
      "type": "object",
      "title": "NodeInfoUsage represents usage information about this server, such as number of users.",
      "properties": {
        "localPosts": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LocalPosts"
        },
        "users": {
          "$ref": "#/definitions/NodeInfoUsers"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "NodeInfoUsers": {
      "type": "object",
      "title": "NodeInfoUsers represents aggregate information about the users on the server.",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "Source": {
      "description": "Returned as an additional entity when verifying and updated credentials, as an attribute of Account.",
      "type": "object",
      "title": "Source represents display or publishing preferences of user's own account.",
      "properties": {
        "also_known_as_uris": {
          "description": "This account is aliased to / also known as accounts at the\ngiven ActivityPub URIs. To set this, use `/api/v1/accounts/alias`.\n\nOmitted from json if empty / not set.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AlsoKnownAsURIs"
        },
        "fields": {
          "description": "Metadata about the account.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/field"
          },
          "x-go-name": "Fields"
        },
        "follow_requests_count": {
          "description": "The number of pending follow requests.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FollowRequestsCount"
        },
        "language": {
          "description": "The default posting language for new statuses.",
          "type": "string",
          "x-go-name": "Language"
        },
        "note": {
          "description": "Profile bio.",
          "type": "string",
          "x-go-name": "Note"
        },
        "privacy": {
          "description": "The default post privacy to be used for new statuses.\npublic = Public post\nunlisted = Unlisted post\nprivate = Followers-only post\ndirect = Direct post",
          "type": "string",
          "x-go-name": "Privacy"
        },
        "sensitive": {
          "description": "Whether new statuses should be marked sensitive by default.",
          "type": "boolean",
          "x-go-name": "Sensitive"
        },
        "status_content_type": {
          "description": "The default posting content type for new statuses.",
          "type": "string",
          "x-go-name": "StatusContentType"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "TimelineMarker": {
      "type": "object",
      "title": "TimelineMarker contains information about a user's progress through a specific timeline.",
      "properties": {
        "last_read_id": {
          "description": "The ID of the most recently viewed entity.",
          "type": "string",
          "x-go-name": "LastReadID"
        },
        "updated_at": {
          "description": "The timestamp of when the marker was set (ISO 8601 Datetime)",
          "type": "string",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "Used for locking to prevent write conflicts.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "account": {
      "description": "The modelled account can be either a remote account, or one on this instance.",
      "type": "object",
      "title": "Account models a fediverse account.",
      "properties": {
        "acct": {
          "description": "The account URI as discovered via webfinger.\nEqual to username for local users, or username@domain for remote users.",
          "type": "string",
          "x-go-name": "Acct",
          "example": "some_user@example.org"
        },
        "avatar": {
          "description": "Web location of the account's avatar.",
          "type": "string",
          "x-go-name": "Avatar",
          "example": "https://example.org/media/some_user/avatar/original/avatar.jpeg"
        },
        "avatar_static": {
          "description": "Web location of a static version of the account's avatar.\nOnly relevant when the account's main avatar is a video or a gif.",
          "type": "string",
          "x-go-name": "AvatarStatic",
          "example": "https://example.org/media/some_user/avatar/static/avatar.png"
        },
        "bot": {
          "description": "Account identifies as a bot.",
          "type": "boolean",
          "x-go-name": "Bot"
        },
        "created_at": {
          "description": "When the account was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "custom_css": {
          "description": "CustomCSS to include when rendering this account's profile or statuses.",
          "type": "string",
          "x-go-name": "CustomCSS"
        },
        "discoverable": {
          "description": "Account has opted into discovery features.",
          "type": "boolean",
          "x-go-name": "Discoverable"
        },
        "display_name": {
          "description": "The account's display name.",
          "type": "string",
          "x-go-name": "DisplayName",
          "example": "big jeff (he/him)"
        },
        "emojis": {
          "description": "Array of custom emojis used in this account's note or display name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emoji"
          },
          "x-go-name": "Emojis"
        },
        "enable_rss": {
          "description": "Account has enabled RSS feed.\nKey/value omitted if false.",
          "type": "boolean",
          "x-go-name": "EnableRSS"
        },
        "fields": {
          "description": "Additional metadata attached to this account's profile.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/field"
          },
          "x-go-name": "Fields"
        },
        "followers_count": {
          "description": "Number of accounts following this account, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FollowersCount"
        },
        "following_count": {
          "description": "Number of account's followed by this account, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FollowingCount"
        },
        "header": {
          "description": "Web location of the account's header image.",
          "type": "string",
          "x-go-name": "Header",
          "example": "https://example.org/media/some_user/header/original/header.jpeg"
        },
        "header_static": {
          "description": "Web location of a static version of the account's header.\nOnly relevant when the account's main header is a video or a gif.",
          "type": "string",
          "x-go-name": "HeaderStatic",
          "example": "https://example.org/media/some_user/header/static/header.png"
        },
        "hide_collections": {
          "description": "Account has opted to hide their followers/following collections.\nKey/value omitted if false.",
          "type": "boolean",
          "x-go-name": "HideCollections"
        },
        "id": {
          "description": "The account id.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "last_status_at": {
          "description": "When the account's most recent status was posted (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "LastStatusAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "locked": {
          "description": "Account manually approves follow requests.",
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "moved": {
          "$ref": "#/definitions/account"
        },
        "mute_expires_at": {
          "description": "If this account has been muted, when will the mute expire (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "MuteExpiresAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "note": {
          "description": "Bio/description of this account.",
          "type": "string",
          "x-go-name": "Note"
        },
        "role": {
          "$ref": "#/definitions/accountRole"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "statuses_count": {
          "description": "Number of statuses posted by this account, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusesCount"
        },
        "suspended": {
          "description": "Account has been suspended by our instance.",
          "type": "boolean",
          "x-go-name": "Suspended"
        },
        "theme": {
          "description": "Filename of user-selected CSS theme to include when rendering this account's profile or statuses. Eg., `blurple-light.css`.",
          "type": "string",
          "x-go-name": "Theme"
        },
        "url": {
          "description": "Web location of the account's profile page.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/@some_user"
        },
        "username": {
          "description": "The username of the account, not including domain.",
          "type": "string",
          "x-go-name": "Username",
          "example": "some_user"
        }
      },
      "x-go-name": "Account",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "accountRelationship": {
      "type": "object",
      "title": "Relationship represents a relationship between accounts.",
      "properties": {
        "blocked_by": {
          "description": "This account is blocking you.",
          "type": "boolean",
          "x-go-name": "BlockedBy"
        },
        "blocking": {
          "description": "You are blocking this account.",
          "type": "boolean",
          "x-go-name": "Blocking"
        },
        "domain_blocking": {
          "description": "You are blocking this account's domain.",
          "type": "boolean",
          "x-go-name": "DomainBlocking"
        },
        "endorsed": {
          "description": "You are featuring this account on your profile.",
          "type": "boolean",
          "x-go-name": "Endorsed"
        },
        "followed_by": {
          "description": "This account follows you.",
          "type": "boolean",
          "x-go-name": "FollowedBy"
        },
        "following": {
          "description": "You are following this account.",
          "type": "boolean",
          "x-go-name": "Following"
        },
        "id": {
          "description": "The account id.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBW9XGEP7G6K88VY4S9MPE1R"
        },
        "muting": {
          "description": "You are muting this account.",
          "type": "boolean",
          "x-go-name": "Muting"
        },
        "muting_notifications": {
          "description": "You are muting notifications from this account.",
          "type": "boolean",
          "x-go-name": "MutingNotifications"
        },
        "note": {
          "description": "Your note on this account.",
          "type": "string",
          "x-go-name": "Note"
        },
        "notifying": {
          "description": "You are seeing notifications when this account posts.",
          "type": "boolean",
          "x-go-name": "Notifying"
        },
        "requested": {
          "description": "You have requested to follow this account, and the request is pending.",
          "type": "boolean",
          "x-go-name": "Requested"
        },
        "requested_by": {
          "description": "This account has requested to follow you, and the request is pending.",
          "type": "boolean",
          "x-go-name": "RequestedBy"
        },
        "showing_reblogs": {
          "description": "You are seeing reblogs/boosts from this account in your home timeline.",
          "type": "boolean",
          "x-go-name": "ShowingReblogs"
        }
      },
      "x-go-name": "Relationship",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "accountRole": {
      "type": "object",
      "title": "AccountRole models the role of an account.",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "AccountRole",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "adminAccountInfo": {
      "type": "object",
      "title": "AdminAccountInfo models the admin view of an account's details.",
      "properties": {
        "account": {
          "$ref": "#/definitions/account"
        },
        "approved": {
          "description": "Whether the account is currently approved.",
          "type": "boolean",
          "x-go-name": "Approved"
        },
        "confirmed": {
          "description": "Whether the account has confirmed their email address.",
          "type": "boolean",
          "x-go-name": "Confirmed"
        },
        "created_at": {
          "description": "When the account was first discovered. (ISO 8601 Datetime)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "created_by_application_id": {
          "description": "The ID of the application that created this account.",
          "type": "string",
          "x-go-name": "CreatedByApplicationID"
        },
        "disabled": {
          "description": "Whether the account is currently disabled.",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "domain": {
          "description": "The domain of the account.\nNull for local accounts.",
          "type": "string",
          "x-go-name": "Domain",
          "example": "example.org"
        },
        "email": {
          "description": "The email address associated with the account.\nEmpty string for remote accounts or accounts with\nno known email address.",
          "type": "string",
          "x-go-name": "Email",
          "example": "someone@somewhere.com"
        },
        "id": {
          "description": "The ID of the account in the database.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01GQ4PHNT622DQ9X95XQX4KKNR"
        },
        "invite_request": {
          "description": "The reason given when signing up.\nNull if no reason / remote account.",
          "type": "string",
          "x-go-name": "InviteRequest",
          "example": "Pleaaaaaaaaaaaaaaase!!"
        },
        "invited_by_account_id": {
          "description": "The ID of the account that invited this user",
          "type": "string",
          "x-go-name": "InvitedByAccountID"
        },
        "ip": {
          "description": "The IP address last used to login to this account.\nNull if not known.",
          "type": "string",
          "x-go-name": "IP",
          "example": "192.0.2.1"
        },
        "ips": {
          "description": "All known IP addresses associated with this account.\nNOT IMPLEMENTED (will always be empty array).",
          "type": "array",
          "items": {},
          "x-go-name": "IPs",
          "example": []
        },
        "locale": {
          "description": "The locale of the account. (ISO 639 Part 1 two-letter language code)",
          "type": "string",
          "x-go-name": "Locale",
          "example": "en"
        },
        "role": {
          "$ref": "#/definitions/accountRole"
        },
        "silenced": {
          "description": "Whether the account is currently silenced",
          "type": "boolean",
          "x-go-name": "Silenced"
        },
        "suspended": {
          "description": "Whether the account is currently suspended.",
          "type": "boolean",
          "x-go-name": "Suspended"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string",
          "x-go-name": "Username",
          "example": "dril"
        }
      },
      "x-go-name": "AdminAccountInfo",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "adminActionResponse": {
      "description": "AdminActionResponse models the server\nresponse to an admin action.",
      "type": "object",
      "properties": {
        "action_id": {
          "description": "Internal ID of the action.",
          "type": "string",
          "x-go-name": "ActionID",
          "example": "01H9QG6TZ9W5P0402VFRVM17TH"
        }
      },
      "x-go-name": "AdminActionResponse",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "adminEmoji": {
      "type": "object",
      "title": "AdminEmoji models the admin view of a custom emoji.",
      "properties": {
        "category": {
          "description": "Used for sorting custom emoji in the picker.",
          "type": "string",
          "x-go-name": "Category",
          "example": "blobcats"
        },
        "content_type": {
          "description": "The MIME content type of the emoji.",
          "type": "string",
          "x-go-name": "ContentType",
          "example": "image/png"
        },
        "disabled": {
          "description": "True if this emoji has been disabled by an admin action.",
          "type": "boolean",
          "x-go-name": "Disabled",
          "example": false
        },
        "domain": {
          "description": "The domain from which the emoji originated. Only defined for remote domains, otherwise key will not be set.",
          "type": "string",
          "x-go-name": "Domain",
          "example": "example.org"
        },
        "id": {
          "description": "The ID of the emoji.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01GEM7SFDZ7GZNRXFVZ3X4E4N1"
        },
        "shortcode": {
          "description": "The name of the custom emoji.",
          "type": "string",
          "x-go-name": "Shortcode",
          "example": "blobcat_uwu"
        },
        "static_url": {
          "description": "A link to a static copy of the custom emoji.",
          "type": "string",
          "x-go-name": "StaticURL",
          "example": "https://example.org/fileserver/emojis/blogcat_uwu.png"
        },
        "total_file_size": {
          "description": "The total file size taken up by the emoji in bytes, including static and animated versions.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalFileSize",
          "example": 69420
        },
        "updated_at": {
          "description": "Time when the emoji image was last updated.",
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2022-10-05T09:21:26.419Z"
        },
        "uri": {
          "description": "The ActivityPub URI of the emoji.",
          "type": "string",
          "x-go-name": "URI",
          "example": "https://example.org/emojis/016T5Q3SQKBT337DAKVSKNXXW1"
        },
        "url": {
          "description": "Web URL of the custom emoji.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/fileserver/emojis/blogcat_uwu.gif"
        },
        "visible_in_picker": {
          "description": "Emoji is visible in the emoji picker of the instance.",
          "type": "boolean",
          "x-go-name": "VisibleInPicker",
          "example": true
        }
      },
      "x-go-name": "AdminEmoji",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "adminReport": {
      "type": "object",
      "title": "AdminReport models the admin view of a report.",
      "properties": {
        "account": {
          "$ref": "#/definitions/adminAccountInfo"
        },
        "action_taken": {
          "description": "Whether an action has been taken by an admin in response to this report.",
          "type": "boolean",
          "x-go-name": "ActionTaken",
          "example": false
        },
        "action_taken_at": {
          "description": "If an action was taken, at what time was this done? (ISO 8601 Datetime)\nWill be null if not set / no action yet taken.",
          "type": "string",
          "x-go-name": "ActionTakenAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "action_taken_by_account": {
          "$ref": "#/definitions/adminAccountInfo"
        },
        "action_taken_comment": {
          "description": "If an action was taken, what comment was made by the admin on the taken action?\nWill be null if not set / no action yet taken.",
          "type": "string",
          "x-go-name": "ActionTakenComment",
          "example": "Account was suspended."
        },
        "assigned_account": {
          "$ref": "#/definitions/adminAccountInfo"
        },
        "category": {
          "description": "Under what category was this report created?",
          "type": "string",
          "x-go-name": "Category",
          "example": "spam"
        },
        "comment": {
          "description": "Comment submitted when the report was created.\nWill be empty if no comment was submitted.",
          "type": "string",
          "x-go-name": "Comment",
          "example": "This person has been harassing me."
        },
        "created_at": {
          "description": "The date when this report was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "forwarded": {
          "description": "Bool to indicate that report should be federated to remote instance.",
          "type": "boolean",
          "x-go-name": "Forwarded",
          "example": true
        },
        "id": {
          "description": "ID of the report.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "rules": {
          "description": "Array of rules that were broken according to this report.\nWill be empty if no rule IDs were submitted with the report.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceRule"
          },
          "x-go-name": "Rules"
        },
        "statuses": {
          "description": "Array of  statuses that were submitted along with this report.\nWill be empty if no status IDs were submitted with the report.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/status"
          },
          "x-go-name": "Statuses"
        },
        "target_account": {
          "$ref": "#/definitions/adminAccountInfo"
        },
        "updated_at": {
          "description": "Time of last action on this report (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        }
      },
      "x-go-name": "AdminReport",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "application": {
      "type": "object",
      "title": "Application models an api application.",
      "properties": {
        "client_id": {
          "description": "Client ID associated with this application.",
          "type": "string",
          "x-go-name": "ClientID"
        },
        "client_secret": {
          "description": "Client secret associated with this application.",
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "id": {
          "description": "The ID of the application.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "name": {
          "description": "The name of the application.",
          "type": "string",
          "x-go-name": "Name",
          "example": "Tusky"
        },
        "redirect_uri": {
          "description": "Post-authorization redirect URI for the application (OAuth2).",
          "type": "string",
          "x-go-name": "RedirectURI",
          "example": "https://example.org/callback?some=query"
        },
        "vapid_key": {
          "description": "Push API key for this application.",
          "type": "string",
          "x-go-name": "VapidKey"
        },
        "website": {
          "description": "The website associated with the application (url)",
          "type": "string",
          "x-go-name": "Website",
          "example": "https://tusky.app"
        }
      },
      "x-go-name": "Application",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "attachment": {
      "type": "object",
      "title": "Attachment models a media attachment.",
      "properties": {
        "blurhash": {
          "description": "A hash computed by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.\nSee https://github.com/woltapp/blurhash",
          "type": "string",
          "x-go-name": "Blurhash"
        },
        "description": {
          "description": "Alt text that describes what is in the media attachment.",
          "type": "string",
          "x-go-name": "Description",
          "example": "This is a picture of a kitten."
        },
        "id": {
          "description": "The ID of the attachment.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FC31DZT1AYWDZ8XTCRWRBYRK"
        },
        "meta": {
          "$ref": "#/definitions/mediaMeta"
        },
        "preview_remote_url": {
          "description": "The location of a scaled-down preview of the attachment on the remote server.\nOnly defined for instances other than our own.",
          "type": "string",
          "x-go-name": "PreviewRemoteURL",
          "example": "https://some-other-server.org/attachments/small/ahhhhh.jpeg"
        },
        "preview_url": {
          "description": "The location of a scaled-down preview of the attachment.",
          "type": "string",
          "x-go-name": "PreviewURL",
          "example": "https://example.org/fileserver/some_id/attachments/some_id/small/attachment.jpeg"
        },
        "remote_url": {
          "description": "The location of the full-size original attachment on the remote server.\nOnly defined for instances other than our own.",
          "type": "string",
          "x-go-name": "RemoteURL",
          "example": "https://some-other-server.org/attachments/original/ahhhhh.jpeg"
        },
        "text_url": {
          "description": "A shorter URL for the attachment.\nIn our case, we just give the URL again since we don't create smaller URLs.",
          "type": "string",
          "x-go-name": "TextURL"
        },
        "type": {
          "description": "The type of the attachment.",
          "type": "string",
          "x-go-name": "Type",
          "example": "image"
        },
        "url": {
          "description": "The location of the original full-size attachment.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/fileserver/some_id/attachments/some_id/original/attachment.jpeg"
        }
      },
      "x-go-name": "Attachment",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "card": {
      "type": "object",
      "title": "Card represents a rich preview card that is generated using OpenGraph tags from a URL.",
      "properties": {
        "author_name": {
          "description": "The author of the original resource.",
          "type": "string",
          "x-go-name": "AuthorName",
          "example": "weewee@buzzfeed.com"
        },
        "author_url": {
          "description": "A link to the author of the original resource.",
          "type": "string",
          "x-go-name": "AuthorURL",
          "example": "https://buzzfeed.com/authors/weewee"
        },
        "blurhash": {
          "description": "A hash computed by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.",
          "type": "string",
          "x-go-name": "Blurhash"
        },
        "description": {
          "description": "Description of preview.",
          "type": "string",
          "x-go-name": "Description",
          "example": "Is water wet? We're not sure. In this article, we ask an expert..."
        },
        "embed_url": {
          "description": "Used for photo embeds, instead of custom html.",
          "type": "string",
          "x-go-name": "EmbedURL"
        },
        "height": {
          "description": "Height of preview, in pixels.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height"
        },
        "html": {
          "description": "HTML to be used for generating the preview card.",
          "type": "string",
          "x-go-name": "HTML"
        },
        "image": {
          "description": "Preview thumbnail.",
          "type": "string",
          "x-go-name": "Image",
          "example": "https://example.org/fileserver/preview/thumb.jpg"
        },
        "provider_name": {
          "description": "The provider of the original resource.",
          "type": "string",
          "x-go-name": "ProviderName",
          "example": "Buzzfeed"
        },
        "provider_url": {
          "description": "A link to the provider of the original resource.",
          "type": "string",
          "x-go-name": "ProviderURL",
          "example": "https://buzzfeed.com"
        },
        "title": {
          "description": "Title of linked resource.",
          "type": "string",
          "x-go-name": "Title",
          "example": "Buzzfeed - Is Water Wet?"
        },
        "type": {
          "description": "The type of the preview card.",
          "type": "string",
          "x-go-name": "Type",
          "example": "link"
        },
        "url": {
          "description": "Location of linked resource.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://buzzfeed.com/some/fuckin/buzzfeed/article"
        },
        "width": {
          "description": "Width of preview, in pixels.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Width"
        }
      },
      "x-go-name": "Card",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "conversation": {
      "description": "Conversation represents a conversation\nwith \"direct message\" visibility.",
      "type": "object",
      "properties": {
        "accounts": {
          "description": "Participants in the conversation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/account"
          },
          "x-go-name": "Accounts"
        },
        "id": {
          "description": "Local database ID of the conversation.",
          "type": "string",
          "x-go-name": "ID"
        },
        "last_status": {
          "$ref": "#/definitions/status"
        },
        "unread": {
          "description": "Is the conversation currently marked as unread?",
          "type": "boolean",
          "x-go-name": "Unread"
        }
      },
      "x-go-name": "Conversation",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "debugAPUrlResponse": {
      "description": "DebugAPUrlResponse provides detailed debug\ninformation for an AP URL dereference request.",
      "type": "object",
      "properties": {
        "request_headers": {
          "description": "HTTP headers used in the outgoing request.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "RequestHeaders"
        },
        "request_url": {
          "description": "Remote AP URL that was requested.",
          "type": "string",
          "x-go-name": "RequestURL"
        },
        "response_body": {
          "description": "Body returned from the remote instance.\nWill be stringified bytes; may be JSON,\nmay be an error, may be both!",
          "type": "string",
          "x-go-name": "ResponseBody"
        },
        "response_code": {
          "description": "HTTP response code returned from the remote instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResponseCode"
        },
        "response_headers": {
          "description": "HTTP headers returned from the remote instance.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "ResponseHeaders"
        }
      },
      "x-go-name": "DebugAPUrlResponse",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "domain": {
      "description": "Domain represents a remote domain",
      "type": "object",
      "properties": {
        "domain": {
          "description": "The hostname of the domain.",
          "type": "string",
          "x-go-name": "Domain",
          "example": "example.org"
        },
        "public_comment": {
          "description": "If the domain is blocked, what's the publicly-stated reason for the block.",
          "type": "string",
          "x-go-name": "PublicComment",
          "example": "they smell"
        },
        "silenced_at": {
          "description": "Time at which this domain was silenced. Key will not be present on open domains.",
          "type": "string",
          "x-go-name": "SilencedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "suspended_at": {
          "description": "Time at which this domain was suspended. Key will not be present on open domains.",
          "type": "string",
          "x-go-name": "SuspendedAt",
          "example": "2021-07-30T09:20:25+00:00"
        }
      },
      "x-go-name": "Domain",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "domainPermission": {
      "type": "object",
      "title": "DomainPermission represents a permission applied to one domain (explicit block/allow).",
      "properties": {
        "created_at": {
          "description": "Time at which the permission entry was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "created_by": {
          "description": "ID of the account that created this domain permission entry.",
          "type": "string",
          "x-go-name": "CreatedBy",
          "example": "01FBW2758ZB6PBR200YPDDJK4C"
        },
        "domain": {
          "description": "The hostname of the domain.",
          "type": "string",
          "x-go-name": "Domain",
          "example": "example.org"
        },
        "id": {
          "description": "The ID of the domain permission entry.",
          "type": "string",
          "x-go-name": "ID",
          "readOnly": true,
          "example": "01FBW21XJA09XYX51KV5JVBW0F"
        },
        "obfuscate": {
          "description": "Obfuscate the domain name when serving this domain permission entry publicly.",
          "type": "boolean",
          "x-go-name": "Obfuscate",
          "example": false
        },
        "private_comment": {
          "description": "Private comment for this permission entry, visible to this instance's admins only.",
          "type": "string",
          "x-go-name": "PrivateComment",
          "example": "they are poopoo"
        },
        "public_comment": {
          "description": "If the domain is blocked, what's the publicly-stated reason for the block.",
          "type": "string",
          "x-go-name": "PublicComment",
          "example": "they smell"
        },
        "silenced_at": {
          "description": "Time at which this domain was silenced. Key will not be present on open domains.",
          "type": "string",
          "x-go-name": "SilencedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "subscription_id": {
          "description": "If applicable, the ID of the subscription that caused this domain permission entry to be created.",
          "type": "string",
          "x-go-name": "SubscriptionID",
          "example": "01FBW25TF5J67JW3HFHZCSD23K"
        },
        "suspended_at": {
          "description": "Time at which this domain was suspended. Key will not be present on open domains.",
          "type": "string",
          "x-go-name": "SuspendedAt",
          "example": "2021-07-30T09:20:25+00:00"
        }
      },
      "x-go-name": "DomainPermission",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "emoji": {
      "type": "object",
      "title": "Emoji represents a custom emoji.",
      "properties": {
        "category": {
          "description": "Used for sorting custom emoji in the picker.",
          "type": "string",
          "x-go-name": "Category",
          "example": "blobcats"
        },
        "shortcode": {
          "description": "The name of the custom emoji.",
          "type": "string",
          "x-go-name": "Shortcode",
          "example": "blobcat_uwu"
        },
        "static_url": {
          "description": "A link to a static copy of the custom emoji.",
          "type": "string",
          "x-go-name": "StaticURL",
          "example": "https://example.org/fileserver/emojis/blogcat_uwu.png"
        },
        "url": {
          "description": "Web URL of the custom emoji.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/fileserver/emojis/blogcat_uwu.gif"
        },
        "visible_in_picker": {
          "description": "Emoji is visible in the emoji picker of the instance.",
          "type": "boolean",
          "x-go-name": "VisibleInPicker",
          "example": true
        }
      },
      "x-go-name": "Emoji",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "emojiCategory": {
      "type": "object",
      "title": "EmojiCategory represents a custom emoji category.",
      "properties": {
        "id": {
          "description": "The ID of the custom emoji category.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The name of the custom emoji category.",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "EmojiCategory",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "field": {
      "type": "object",
      "title": "Field represents a name/value pair to display on an account's profile.",
      "properties": {
        "name": {
          "description": "The key/name of this field.",
          "type": "string",
          "x-go-name": "Name",
          "example": "pronouns"
        },
        "value": {
          "description": "The value of this field.",
          "type": "string",
          "x-go-name": "Value",
          "example": "they/them"
        },
        "verified_at": {
          "description": "If this field has been verified, when did this occur? (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "VerifiedAt",
          "example": "2021-07-30T09:20:25+00:00"
        }
      },
      "x-go-name": "Field",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "filterContext": {
      "description": "v1 and v2 filter APIs use the same set of contexts.",
      "type": "string",
      "title": "FilterContext represents the context in which to apply a filter.",
      "x-go-name": "FilterContext",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "filterV1": {
      "description": "Note that v1 filters are mapped to v2 filters and v2 filter keywords internally.\nIf whole_word is true, client app should do:\nDefine ‘word constituent character’ for your app. In the official implementation, it’s [A-Za-z0-9_] in JavaScript, and [[:word:]] in Ruby.\nRuby uses the POSIX character class (Letter | Mark | Decimal_Number | Connector_Punctuation).\nIf the phrase starts with a word character, and if the previous character before matched range is a word character, its matched range should be treated to not match.\nIf the phrase ends with a word character, and if the next character after matched range is a word character, its matched range should be treated to not match.\nPlease check app/javascript/mastodon/selectors/index.js and app/lib/feed_manager.rb in the Mastodon source code for more details.",
      "type": "object",
      "title": "FilterV1 represents a user-defined filter for determining which statuses should not be shown to the user.",
      "properties": {
        "context": {
          "description": "The contexts in which the filter should be applied.",
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/filterContext"
          },
          "x-go-name": "Context",
          "example": [
            "home",
            "public"
          ]
        },
        "expires_at": {
          "description": "When the filter should no longer be applied. Null if the filter does not expire.",
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2024-02-01T02:57:49Z"
        },
        "id": {
          "description": "The ID of the filter in the database.",
          "type": "string",
          "x-go-name": "ID"
        },
        "irreversible": {
          "description": "Should matching entities be removed from the user's timelines/views, instead of hidden?",
          "type": "boolean",
          "x-go-name": "Irreversible",
          "example": false
        },
        "phrase": {
          "description": "The text to be filtered.",
          "type": "string",
          "x-go-name": "Phrase",
          "example": "fnord"
        },
        "whole_word": {
          "description": "Should the filter consider word boundaries?",
          "type": "boolean",
          "x-go-name": "WholeWord",
          "example": true
        }
      },
      "x-go-name": "FilterV1",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "headerFilter": {
      "type": "object",
      "title": "HeaderFilter represents a regex value filter applied to one particular HTTP header (allow / block).",
      "properties": {
        "created_at": {
          "description": "Time at which the header filter was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "readOnly": true,
          "example": "2021-07-30T09:20:25+00:00"
        },
        "created_by": {
          "description": "The ID of the admin account that created this header filter.",
          "type": "string",
          "x-go-name": "CreatedBy",
          "readOnly": true,
          "example": "01FBW2758ZB6PBR200YPDDJK4C"
        },
        "header": {
          "description": "The HTTP header to match against.",
          "type": "string",
          "x-go-name": "Header",
          "example": "User-Agent"
        },
        "id": {
          "description": "The ID of the header filter.",
          "type": "string",
          "x-go-name": "ID",
          "readOnly": true,
          "example": "01FBW21XJA09XYX51KV5JVBW0F"
        },
        "regex": {
          "description": "The header value matching regular expression.",
          "type": "string",
          "x-go-name": "Regex",
          "example": ".*Firefox.*"
        }
      },
      "x-go-name": "HeaderFilter",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "hostmeta": {
      "description": "See: https://www.rfc-editor.org/rfc/rfc6415.html#section-3",
      "type": "object",
      "title": "HostMeta represents a hostmeta document.",
      "properties": {
        "Link": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "XMLNS": {
          "type": "string"
        },
        "XMLName": {}
      },
      "x-go-name": "HostMeta",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceConfigurationAccounts": {
      "type": "object",
      "title": "InstanceConfigurationAccounts models instance account config parameters.",
      "properties": {
        "allow_custom_css": {
          "description": "Whether or not accounts on this instance are allowed to upload custom CSS for profiles and statuses.",
          "type": "boolean",
          "x-go-name": "AllowCustomCSS",
          "example": false
        },
        "max_featured_tags": {
          "description": "The maximum number of featured tags allowed for each account.\nCurrently not implemented, so this is hardcoded to 10.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxFeaturedTags"
        },
        "max_profile_fields": {
          "description": "The maximum number of profile fields allowed for each account.\nCurrently not configurable, so this is hardcoded to 6. (https://github.com/superseriousbusiness/gotosocial/issues/1876)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxProfileFields"
        }
      },
      "x-go-name": "InstanceConfigurationAccounts",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceConfigurationMediaAttachments": {
      "type": "object",
      "title": "InstanceConfigurationMediaAttachments models instance media attachment config parameters.",
      "properties": {
        "image_matrix_limit": {
          "description": "Max allowed image size in pixels as height*width.\n\nGtS doesn't set a limit on this, but for compatibility\nwe give Mastodon's 4096x4096px value here.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ImageMatrixLimit",
          "example": 16777216
        },
        "image_size_limit": {
          "description": "Max allowed image size in bytes",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ImageSizeLimit",
          "example": 2097152
        },
        "supported_mime_types": {
          "description": "List of mime types that it's possible to upload to this instance.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SupportedMimeTypes",
          "example": [
            "image/jpeg",
            "image/gif"
          ]
        },
        "video_frame_rate_limit": {
          "description": "Max allowed video frame rate.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VideoFrameRateLimit",
          "example": 60
        },
        "video_matrix_limit": {
          "description": "Max allowed video size in pixels as height*width.\n\nGtS doesn't set a limit on this, but for compatibility\nwe give Mastodon's 4096x4096px value here.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VideoMatrixLimit",
          "example": 16777216
        },
        "video_size_limit": {
          "description": "Max allowed video size in bytes",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VideoSizeLimit",
          "example": 10485760
        }
      },
      "x-go-name": "InstanceConfigurationMediaAttachments",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceConfigurationPolls": {
      "type": "object",
      "title": "InstanceConfigurationPolls models instance poll config parameters.",
      "properties": {
        "max_characters_per_option": {
          "description": "Number of characters allowed per option in the poll.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxCharactersPerOption",
          "example": 50
        },
        "max_expiration": {
          "description": "Maximum expiration time of the poll in seconds.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxExpiration",
          "example": 2629746
        },
        "max_options": {
          "description": "Number of options permitted in a poll on this instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxOptions",
          "example": 4
        },
        "min_expiration": {
          "description": "Minimum expiration time of the poll in seconds.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinExpiration",
          "example": 300
        }
      },
      "x-go-name": "InstanceConfigurationPolls",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceConfigurationStatuses": {
      "type": "object",
      "title": "InstanceConfigurationStatuses models instance status config parameters.",
      "properties": {
        "characters_reserved_per_url": {
          "description": "Amount of characters clients should assume a url takes up.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharactersReservedPerURL",
          "example": 25
        },
        "max_characters": {
          "description": "Maximum allowed length of a post on this instance, in characters.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxCharacters",
          "example": 5000
        },
        "max_media_attachments": {
          "description": "Max number of attachments allowed on a status.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxMediaAttachments",
          "example": 4
        },
        "supported_mime_types": {
          "description": "List of mime types that it's possible to use for statuses on this instance.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SupportedMimeTypes",
          "example": [
            "text/plain",
            "text/markdown"
          ]
        }
      },
      "x-go-name": "InstanceConfigurationStatuses",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceRule": {
      "type": "object",
      "title": "InstanceRule represents a single instance rule.",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-name": "InstanceRule",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV1": {
      "type": "object",
      "title": "InstanceV1 models information about this instance.",
      "properties": {
        "account_domain": {
          "description": "The domain of accounts on this instance.\nThis will not necessarily be the same as\nsimply the Host part of the URI.",
          "type": "string",
          "x-go-name": "AccountDomain",
          "example": "example.org"
        },
        "approval_required": {
          "description": "New account registrations require admin approval.",
          "type": "boolean",
          "x-go-name": "ApprovalRequired"
        },
        "configuration": {
          "$ref": "#/definitions/instanceV1Configuration"
        },
        "contact_account": {
          "$ref": "#/definitions/account"
        },
        "description": {
          "description": "Description of the instance.\n\nShould be HTML formatted, but might be plaintext.\n\nThis should be displayed on the 'about' page for an instance.",
          "type": "string",
          "x-go-name": "Description"
        },
        "description_text": {
          "description": "Raw (unparsed) version of description.",
          "type": "string",
          "x-go-name": "DescriptionText"
        },
        "email": {
          "description": "An email address that may be used for inquiries.",
          "type": "string",
          "x-go-name": "Email",
          "example": "admin@example.org"
        },
        "invites_enabled": {
          "description": "Invites are enabled on this instance.",
          "type": "boolean",
          "x-go-name": "InvitesEnabled"
        },
        "languages": {
          "description": "Primary language of the instance.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Languages",
          "example": [
            "en"
          ]
        },
        "max_toot_chars": {
          "description": "Maximum allowed length of a post on this instance, in characters.\n\nThis is provided for compatibility with Tusky and other apps.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxTootChars",
          "example": 5000
        },
        "registrations": {
          "description": "New account registrations are enabled on this instance.",
          "type": "boolean",
          "x-go-name": "Registrations"
        },
        "rules": {
          "description": "An itemized list of rules for this instance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceRule"
          },
          "x-go-name": "Rules"
        },
        "short_description": {
          "description": "A shorter description of the instance.\n\nShould be HTML formatted, but might be plaintext.\n\nThis should be displayed on the instance splash/landing page.",
          "type": "string",
          "x-go-name": "ShortDescription"
        },
        "short_description_text": {
          "description": "Raw (unparsed) version of short description.",
          "type": "string",
          "x-go-name": "ShortDescriptionText"
        },
        "stats": {
          "description": "Statistics about the instance: number of posts, accounts, etc.\nValues are pointers because we don't want to skip 0 values when\nrendering stats via web templates.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Stats"
        },
        "terms": {
          "description": "Terms and conditions for accounts on this instance.",
          "type": "string",
          "x-go-name": "Terms"
        },
        "terms_text": {
          "description": "Raw (unparsed) version of terms.",
          "type": "string",
          "x-go-name": "TermsRaw"
        },
        "thumbnail": {
          "description": "URL of the instance avatar/banner image.",
          "type": "string",
          "x-go-name": "Thumbnail",
          "example": "https://example.org/files/instance/thumbnail.jpeg"
        },
        "thumbnail_description": {
          "description": "Description of the instance thumbnail.",
          "type": "string",
          "x-go-name": "ThumbnailDescription",
          "example": "picture of a cute lil' friendly sloth"
        },
        "thumbnail_type": {
          "description": "MIME type of the instance thumbnail.",
          "type": "string",
          "x-go-name": "ThumbnailType",
          "example": "image/png"
        },
        "title": {
          "description": "The title of the instance.",
          "type": "string",
          "x-go-name": "Title",
          "example": "GoToSocial Example Instance"
        },
        "uri": {
          "description": "The URI of the instance.",
          "type": "string",
          "x-go-name": "URI",
          "example": "https://gts.example.org"
        },
        "urls": {
          "$ref": "#/definitions/instanceV1URLs"
        },
        "version": {
          "description": "The version of GoToSocial installed on the instance.\n\nThis will contain at least a semantic version number.\n\nIt may also contain, after a space, the short git commit ID of the running software.",
          "type": "string",
          "x-go-name": "Version",
          "example": "0.1.1 cb85f65"
        }
      },
      "x-go-name": "InstanceV1",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV1Configuration": {
      "type": "object",
      "title": "InstanceV1Configuration models instance configuration parameters.",
      "properties": {
        "accounts": {
          "$ref": "#/definitions/instanceConfigurationAccounts"
        },
        "emojis": {
          "$ref": "#/definitions/InstanceConfigurationEmojis"
        },
        "media_attachments": {
          "$ref": "#/definitions/instanceConfigurationMediaAttachments"
        },
        "polls": {
          "$ref": "#/definitions/instanceConfigurationPolls"
        },
        "statuses": {
          "$ref": "#/definitions/instanceConfigurationStatuses"
        }
      },
      "x-go-name": "InstanceV1Configuration",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV1URLs": {
      "type": "object",
      "title": "InstanceV1URLs models instance-relevant URLs for client application consumption.",
      "properties": {
        "streaming_api": {
          "description": "Websockets address for status and notification streaming.",
          "type": "string",
          "x-go-name": "StreamingAPI",
          "example": "wss://example.org"
        }
      },
      "x-go-name": "InstanceV1URLs",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2": {
      "type": "object",
      "title": "InstanceV2 models information about this instance.",
      "properties": {
        "account_domain": {
          "description": "The domain of accounts on this instance.\nThis will not necessarily be the same as\ndomain.",
          "type": "string",
          "x-go-name": "AccountDomain",
          "example": "example.org"
        },
        "configuration": {
          "$ref": "#/definitions/instanceV2Configuration"
        },
        "contact": {
          "$ref": "#/definitions/instanceV2Contact"
        },
        "description": {
          "description": "Description of the instance.\n\nShould be HTML formatted, but might be plaintext.\n\nThis should be displayed on the 'about' page for an instance.",
          "type": "string",
          "x-go-name": "Description"
        },
        "description_text": {
          "description": "Raw (unparsed) version of description.",
          "type": "string",
          "x-go-name": "DescriptionText"
        },
        "domain": {
          "description": "The domain of the instance.",
          "type": "string",
          "x-go-name": "Domain",
          "example": "gts.example.org"
        },
        "languages": {
          "description": "Primary languages of the instance + moderators/admins.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Languages",
          "example": [
            "en"
          ]
        },
        "registrations": {
          "$ref": "#/definitions/instanceV2Registrations"
        },
        "rules": {
          "description": "An itemized list of rules for this instance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceRule"
          },
          "x-go-name": "Rules"
        },
        "source_url": {
          "description": "The URL for the source code of the software running on this instance, in keeping with AGPL license requirements.",
          "type": "string",
          "x-go-name": "SourceURL",
          "example": "https://github.com/superseriousbusiness/gotosocial"
        },
        "terms": {
          "description": "Terms and conditions for accounts on this instance.",
          "type": "string",
          "x-go-name": "Terms"
        },
        "terms_text": {
          "description": "Raw (unparsed) version of terms.",
          "type": "string",
          "x-go-name": "TermsText"
        },
        "thumbnail": {
          "$ref": "#/definitions/instanceV2Thumbnail"
        },
        "title": {
          "description": "The title of the instance.",
          "type": "string",
          "x-go-name": "Title",
          "example": "GoToSocial Example Instance"
        },
        "usage": {
          "$ref": "#/definitions/instanceV2Usage"
        },
        "version": {
          "description": "The version of GoToSocial installed on the instance.\n\nThis will contain at least a semantic version number.\n\nIt may also contain, after a space, the short git commit ID of the running software.",
          "type": "string",
          "x-go-name": "Version",
          "example": "0.1.1 cb85f65"
        }
      },
      "x-go-name": "InstanceV2",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2Configuration": {
      "type": "object",
      "title": "Configured values and limits for this instance.",
      "properties": {
        "accounts": {
          "$ref": "#/definitions/instanceConfigurationAccounts"
        },
        "emojis": {
          "$ref": "#/definitions/InstanceConfigurationEmojis"
        },
        "media_attachments": {
          "$ref": "#/definitions/instanceConfigurationMediaAttachments"
        },
        "polls": {
          "$ref": "#/definitions/instanceConfigurationPolls"
        },
        "statuses": {
          "$ref": "#/definitions/instanceConfigurationStatuses"
        },
        "translation": {
          "$ref": "#/definitions/instanceV2ConfigurationTranslation"
        },
        "urls": {
          "$ref": "#/definitions/instanceV2URLs"
        }
      },
      "x-go-name": "InstanceV2Configuration",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2ConfigurationTranslation": {
      "type": "object",
      "title": "Hints related to translation.",
      "properties": {
        "enabled": {
          "description": "Whether the Translations API is available on this instance.\nNot implemented so this value is always false.",
          "type": "boolean",
          "x-go-name": "Enabled"
        }
      },
      "x-go-name": "InstanceV2ConfigurationTranslation",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2Contact": {
      "type": "object",
      "title": "Hints related to contacting a representative of the instance.",
      "properties": {
        "account": {
          "$ref": "#/definitions/account"
        },
        "email": {
          "description": "An email address that can be messaged regarding inquiries or issues.\nEmpty string if no email address set.",
          "type": "string",
          "x-go-name": "Email",
          "example": "someone@example.org"
        }
      },
      "x-go-name": "InstanceV2Contact",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2Registrations": {
      "type": "object",
      "title": "Information about registering for this instance.",
      "properties": {
        "approval_required": {
          "description": "Whether registrations require moderator approval.",
          "type": "boolean",
          "x-go-name": "ApprovalRequired",
          "example": true
        },
        "enabled": {
          "description": "Whether registrations are enabled.",
          "type": "boolean",
          "x-go-name": "Enabled",
          "example": false
        },
        "message": {
          "description": "A custom message (html string) to be shown when registrations are closed.\nValue will be null if no message is set.",
          "type": "string",
          "x-go-name": "Message",
          "example": "\u003cp\u003eRegistrations are currently closed on example.org because of spam bots!\u003c/p\u003e"
        }
      },
      "x-go-name": "InstanceV2Registrations",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2Thumbnail": {
      "type": "object",
      "title": "An image used to represent this instance.",
      "properties": {
        "blurhash": {
          "description": "A hash computed by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.\nKey/value not set if no blurhash available.",
          "type": "string",
          "x-go-name": "Blurhash",
          "example": "UeKUpFxuo~R%0nW;WCnhF6RjaJt757oJodS$"
        },
        "thumbnail_description": {
          "description": "Description of the instance thumbnail.\nKey/value not set if no description available.",
          "type": "string",
          "x-go-name": "Description",
          "example": "picture of a cute lil' friendly sloth"
        },
        "thumbnail_type": {
          "description": "MIME type of the instance thumbnail.\nKey/value not set if thumbnail image type unknown.",
          "type": "string",
          "x-go-name": "Type",
          "example": "image/png"
        },
        "url": {
          "description": "The URL for the thumbnail image.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/fileserver/01BPSX2MKCRVMD4YN4D71G9CP5/attachment/original/01H88X0KQ2DFYYDSWYP93VDJZA.png"
        },
        "versions": {
          "$ref": "#/definitions/instanceV2ThumbnailVersions"
        }
      },
      "x-go-name": "InstanceV2Thumbnail",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2ThumbnailVersions": {
      "type": "object",
      "title": "Links to scaled resolution images, for high DPI screens.",
      "properties": {
        "@1x": {
          "description": "The URL for the thumbnail image at 1x resolution.\nKey/value not set if scaled versions not available.",
          "type": "string",
          "x-go-name": "Size1URL"
        },
        "@2x": {
          "description": "The URL for the thumbnail image at 2x resolution.\nKey/value not set if scaled versions not available.",
          "type": "string",
          "x-go-name": "Size2URL"
        }
      },
      "x-go-name": "InstanceV2ThumbnailVersions",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2URLs": {
      "type": "object",
      "title": "InstanceV2URLs models instance-relevant URLs for client application consumption.",
      "properties": {
        "streaming": {
          "description": "Websockets address for status and notification streaming.",
          "type": "string",
          "x-go-name": "Streaming",
          "example": "wss://example.org"
        }
      },
      "x-go-name": "InstanceV2URLs",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2Usage": {
      "type": "object",
      "title": "Usage data for this instance.",
      "properties": {
        "users": {
          "$ref": "#/definitions/instanceV2Users"
        }
      },
      "x-go-name": "InstanceV2Usage",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "instanceV2Users": {
      "type": "object",
      "title": "Usage data related to users on this instance.",
      "properties": {
        "active_month": {
          "description": "The number of active users in the past 4 weeks.\nCurrently not implemented: will always be 0.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveMonth",
          "example": 0
        }
      },
      "x-go-name": "InstanceV2Users",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "list": {
      "type": "object",
      "title": "List represents a user-created list of accounts that the user follows.",
      "properties": {
        "id": {
          "description": "The ID of the list.",
          "type": "string",
          "x-go-name": "ID"
        },
        "replies_policy": {
          "description": "RepliesPolicy for this list.\nfollowed = Show replies to any followed user\nlist = Show replies to members of the list\nnone = Show replies to no one",
          "type": "string",
          "x-go-name": "RepliesPolicy"
        },
        "title": {
          "description": "The user-defined title of the list.",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-name": "List",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "markers": {
      "type": "object",
      "title": "Marker represents the last read position within a user's timelines.",
      "properties": {
        "home": {
          "$ref": "#/definitions/TimelineMarker"
        },
        "notifications": {
          "$ref": "#/definitions/TimelineMarker"
        }
      },
      "x-go-name": "Marker",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "mediaDimensions": {
      "type": "object",
      "title": "MediaDimensions models detailed properties of a piece of media.",
      "properties": {
        "aspect": {
          "description": "Aspect ratio of the media.\nEqual to width / height.",
          "type": "number",
          "format": "float",
          "x-go-name": "Aspect",
          "example": 1.777777778
        },
        "bitrate": {
          "description": "Bitrate of the media in bits per second.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bitrate",
          "example": 1000000
        },
        "duration": {
          "description": "Duration of the media in seconds.\nOnly set for video and audio.",
          "type": "number",
          "format": "float",
          "x-go-name": "Duration",
          "example": 5.43
        },
        "frame_rate": {
          "description": "Framerate of the media.\nOnly set for video and gifs.",
          "type": "string",
          "x-go-name": "FrameRate",
          "example": "30"
        },
        "height": {
          "description": "Height of the media in pixels.\nNot set for audio.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height",
          "example": 1080
        },
        "size": {
          "description": "Size of the media, in the format `[width]x[height]`.\nNot set for audio.",
          "type": "string",
          "x-go-name": "Size",
          "example": "1920x1080"
        },
        "width": {
          "description": "Width of the media in pixels.\nNot set for audio.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Width",
          "example": 1920
        }
      },
      "x-go-name": "MediaDimensions",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "mediaFocus": {
      "type": "object",
      "title": "MediaFocus models the focal point of a piece of media.",
      "properties": {
        "x": {
          "description": "x position of the focus\nshould be between -1 and 1",
          "type": "number",
          "format": "float",
          "x-go-name": "X"
        },
        "y": {
          "description": "y position of the focus\nshould be between -1 and 1",
          "type": "number",
          "format": "float",
          "x-go-name": "Y"
        }
      },
      "x-go-name": "MediaFocus",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "mediaMeta": {
      "description": "This can be metadata about an image, an audio file, video, etc.",
      "type": "object",
      "title": "MediaMeta models media metadata.",
      "properties": {
        "focus": {
          "$ref": "#/definitions/mediaFocus"
        },
        "original": {
          "$ref": "#/definitions/mediaDimensions"
        },
        "small": {
          "$ref": "#/definitions/mediaDimensions"
        }
      },
      "x-go-name": "MediaMeta",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "nodeinfo": {
      "description": "See: https://nodeinfo.diaspora.software/schema.html",
      "type": "object",
      "title": "Nodeinfo represents a version 2.1 or version 2.0 nodeinfo schema.",
      "properties": {
        "metadata": {
          "description": "Free form key value pairs for software specific values. Clients should not rely on any specific key present.",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Metadata"
        },
        "openRegistrations": {
          "description": "Whether this server allows open self-registration.",
          "type": "boolean",
          "x-go-name": "OpenRegistrations",
          "example": false
        },
        "protocols": {
          "description": "The protocols supported on this server.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols"
        },
        "services": {
          "$ref": "#/definitions/NodeInfoServices"
        },
        "software": {
          "$ref": "#/definitions/NodeInfoSoftware"
        },
        "usage": {
          "$ref": "#/definitions/NodeInfoUsage"
        },
        "version": {
          "description": "The schema version",
          "type": "string",
          "x-go-name": "Version",
          "example": "2.0"
        }
      },
      "x-go-name": "Nodeinfo",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "notification": {
      "type": "object",
      "title": "Notification represents a notification of an event relevant to the user.",
      "properties": {
        "account": {
          "$ref": "#/definitions/account"
        },
        "created_at": {
          "description": "The timestamp of the notification (ISO 8601 Datetime)",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "The id of the notification in the database.",
          "type": "string",
          "x-go-name": "ID"
        },
        "status": {
          "$ref": "#/definitions/status"
        },
        "type": {
          "description": "The type of event that resulted in the notification.\nfollow = Someone followed you. `account` will be set.\nfollow_request = Someone requested to follow you. `account` will be set.\nmention = Someone mentioned you in their status. `status` will be set. `account` will be set.\nreblog = Someone boosted one of your statuses. `status` will be set. `account` will be set.\nfavourite = Someone favourited one of your statuses. `status` will be set. `account` will be set.\npoll = A poll you have voted in or created has ended. `status` will be set. `account` will be set.\nstatus = Someone you enabled notifications for has posted a status. `status` will be set. `account` will be set.\nadmin.sign_up = Someone has signed up for a new account on the instance. `account` will be set.",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-name": "Notification",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "oauthToken": {
      "type": "object",
      "title": "Token represents an OAuth token used for authenticating with the GoToSocial API and performing actions.",
      "properties": {
        "access_token": {
          "description": "Access token used for authorization.",
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "created_at": {
          "description": "When the OAuth token was generated (UNIX timestamp seconds).",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt",
          "example": 1627644520
        },
        "scope": {
          "description": "OAuth scopes granted by this token, space-separated.",
          "type": "string",
          "x-go-name": "Scope",
          "example": "read write admin"
        },
        "token_type": {
          "description": "OAuth token type. Will always be 'Bearer'.",
          "type": "string",
          "x-go-name": "TokenType",
          "example": "bearer"
        }
      },
      "x-go-name": "Token",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "poll": {
      "type": "object",
      "title": "Poll represents a poll attached to a status.",
      "properties": {
        "emojis": {
          "description": "Custom emoji to be used for rendering poll options.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emoji"
          },
          "x-go-name": "Emojis"
        },
        "expired": {
          "description": "Is the poll currently expired?",
          "type": "boolean",
          "x-go-name": "Expired"
        },
        "expires_at": {
          "description": "When the poll ends. (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "description": "The ID of the poll in the database.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBYKMD1KBMJ0W6JF1YZ3VY5D"
        },
        "multiple": {
          "description": "Does the poll allow multiple-choice answers?",
          "type": "boolean",
          "x-go-name": "Multiple"
        },
        "options": {
          "description": "Possible answers for the poll.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pollOption"
          },
          "x-go-name": "Options"
        },
        "own_votes": {
          "description": "When called with a user token, which options has the authorized\nuser chosen? Contains an array of index values for options.\n\nOmitted when no user token provided.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "OwnVotes"
        },
        "voted": {
          "description": "When called with a user token, has the authorized user voted?\n\nOmitted when no user token provided.",
          "type": "boolean",
          "x-go-name": "Voted"
        },
        "voters_count": {
          "description": "How many unique accounts have voted on a multiple-choice poll.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VotersCount"
        },
        "votes_count": {
          "description": "How many votes have been received.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VotesCount"
        }
      },
      "x-go-name": "Poll",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "pollOption": {
      "type": "object",
      "title": "PollOption represents the current vote counts for different poll options.",
      "properties": {
        "title": {
          "description": "The text value of the poll option. String.",
          "type": "string",
          "x-go-name": "Title"
        },
        "votes_count": {
          "description": "The number of received votes for this option.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VotesCount"
        }
      },
      "x-go-name": "PollOption",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "report": {
      "type": "object",
      "title": "Report models a moderation report submitted to the instance, either via the client API or via the federated API.",
      "properties": {
        "action_taken": {
          "description": "Whether an action has been taken by an admin in response to this report.",
          "type": "boolean",
          "x-go-name": "ActionTaken",
          "example": false
        },
        "action_taken_at": {
          "description": "If an action was taken, at what time was this done? (ISO 8601 Datetime)\nWill be null if not set / no action yet taken.",
          "type": "string",
          "x-go-name": "ActionTakenAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "action_taken_comment": {
          "description": "If an action was taken, what comment was made by the admin on the taken action?\nWill be null if not set / no action yet taken.",
          "type": "string",
          "x-go-name": "ActionTakenComment",
          "example": "Account was suspended."
        },
        "category": {
          "description": "Under what category was this report created?",
          "type": "string",
          "x-go-name": "Category",
          "example": "spam"
        },
        "comment": {
          "description": "Comment submitted when the report was created.\nWill be empty if no comment was submitted.",
          "type": "string",
          "x-go-name": "Comment",
          "example": "This person has been harassing me."
        },
        "created_at": {
          "description": "The date when this report was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "forwarded": {
          "description": "Bool to indicate that report should be federated to remote instance.",
          "type": "boolean",
          "x-go-name": "Forwarded",
          "example": true
        },
        "id": {
          "description": "ID of the report.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "rule_ids": {
          "description": "Array of rule IDs that were submitted along with this report.\nWill be empty if no rule IDs were submitted.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RuleIDs",
          "example": [
            "01GPBN5YDY6JKBWE44H7YQBDCQ",
            "01GPBN65PDWSBPWVDD0SQCFFY3"
          ]
        },
        "status_ids": {
          "description": "Array of IDs of statuses that were submitted along with this report.\nWill be empty if no status IDs were submitted.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "StatusIDs",
          "example": [
            "01GPBN5YDY6JKBWE44H7YQBDCQ",
            "01GPBN65PDWSBPWVDD0SQCFFY3"
          ]
        },
        "target_account": {
          "$ref": "#/definitions/account"
        }
      },
      "x-go-name": "Report",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "searchResult": {
      "type": "object",
      "title": "SearchResult models a search result.",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account"
          },
          "x-go-name": "Accounts"
        },
        "hashtags": {
          "description": "Slice of strings if api v1, slice of tags if api v2.",
          "type": "array",
          "items": {},
          "x-go-name": "Hashtags"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/status"
          },
          "x-go-name": "Statuses"
        }
      },
      "x-go-name": "SearchResult",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "status": {
      "type": "object",
      "title": "Status models a status or post.",
      "properties": {
        "account": {
          "$ref": "#/definitions/account"
        },
        "application": {
          "$ref": "#/definitions/application"
        },
        "bookmarked": {
          "description": "This status has been bookmarked by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Bookmarked"
        },
        "card": {
          "$ref": "#/definitions/card"
        },
        "content": {
          "description": "The content of this status. Should be HTML, but might also be plaintext in some cases.",
          "type": "string",
          "x-go-name": "Content",
          "example": "\u003cp\u003eHey this is a status!\u003c/p\u003e"
        },
        "created_at": {
          "description": "The date when this status was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "emojis": {
          "description": "Custom emoji to be used when rendering status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emoji"
          },
          "x-go-name": "Emojis"
        },
        "favourited": {
          "description": "This status has been favourited by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Favourited"
        },
        "favourites_count": {
          "description": "Number of favourites/likes this status has received, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FavouritesCount"
        },
        "id": {
          "description": "ID of the status.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "in_reply_to_account_id": {
          "description": "ID of the account being replied to.",
          "type": "string",
          "x-go-name": "InReplyToAccountID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "in_reply_to_id": {
          "description": "ID of the status being replied to.",
          "type": "string",
          "x-go-name": "InReplyToID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "language": {
          "description": "Primary language of this status (ISO 639 Part 1 two-letter language code).\nWill be null if language is not known.",
          "type": "string",
          "x-go-name": "Language",
          "example": "en"
        },
        "media_attachments": {
          "description": "Media that is attached to this status.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/attachment"
          },
          "x-go-name": "MediaAttachments"
        },
        "mentions": {
          "description": "Mentions of users within the status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mention"
          },
          "x-go-name": "Mentions"
        },
        "muted": {
          "description": "Replies to this status have been muted by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Muted"
        },
        "pinned": {
          "description": "This status has been pinned by the account viewing it (only relevant for your own statuses).",
          "type": "boolean",
          "x-go-name": "Pinned"
        },
        "poll": {
          "$ref": "#/definitions/poll"
        },
        "reblog": {
          "$ref": "#/definitions/statusReblogged"
        },
        "reblogged": {
          "description": "This status has been boosted/reblogged by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Reblogged"
        },
        "reblogs_count": {
          "description": "Number of times this status has been boosted/reblogged, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReblogsCount"
        },
        "replies_count": {
          "description": "Number of replies to this status, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepliesCount"
        },
        "sensitive": {
          "description": "Status contains sensitive content.",
          "type": "boolean",
          "x-go-name": "Sensitive",
          "example": false
        },
        "spoiler_text": {
          "description": "Subject, summary, or content warning for the status.",
          "type": "string",
          "x-go-name": "SpoilerText",
          "example": "warning nsfw"
        },
        "tags": {
          "description": "Hashtags used within the status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tag"
          },
          "x-go-name": "Tags"
        },
        "text": {
          "description": "Plain-text source of a status. Returned instead of content when status is deleted,\nso the user may redraft from the source text without the client having to reverse-engineer\nthe original text from the HTML content.",
          "type": "string",
          "x-go-name": "Text"
        },
        "uri": {
          "description": "ActivityPub URI of the status. Equivalent to the status's activitypub ID.",
          "type": "string",
          "x-go-name": "URI",
          "example": "https://example.org/users/some_user/statuses/01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "url": {
          "description": "The status's publicly available web URL. This link will only work if the visibility of the status is 'public'.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/@some_user/statuses/01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "visibility": {
          "description": "Visibility of this status.",
          "type": "string",
          "x-go-name": "Visibility",
          "example": "unlisted"
        }
      },
      "x-go-name": "Status",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "statusContext": {
      "type": "object",
      "title": "Context models the tree around a given status.",
      "properties": {
        "ancestors": {
          "description": "Parents in the thread.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/status"
          },
          "x-go-name": "Ancestors"
        },
        "descendants": {
          "description": "Children in the thread.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/status"
          },
          "x-go-name": "Descendants"
        }
      },
      "x-go-name": "Context",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "statusEdit": {
      "description": "StatusEdit represents one historical revision of a status, containing\npartial information about the state of the status at that revision.",
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/account"
        },
        "content": {
          "description": "The content of this status at this revision.\nShould be HTML, but might also be plaintext in some cases.",
          "type": "string",
          "x-go-name": "Content",
          "example": "\u003cp\u003eHey this is a status!\u003c/p\u003e"
        },
        "created_at": {
          "description": "The date when this revision was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "emojis": {
          "description": "Custom emoji to be used when rendering status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emoji"
          },
          "x-go-name": "Emojis"
        },
        "media_attachments": {
          "description": "Media that is attached to this status.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/attachment"
          },
          "x-go-name": "MediaAttachments"
        },
        "poll": {
          "$ref": "#/definitions/poll"
        },
        "sensitive": {
          "description": "Status marked sensitive at this revision.",
          "type": "boolean",
          "x-go-name": "Sensitive",
          "example": false
        },
        "spoiler_text": {
          "description": "Subject, summary, or content warning for the status at this revision.",
          "type": "string",
          "x-go-name": "SpoilerText",
          "example": "warning nsfw"
        }
      },
      "x-go-name": "StatusEdit",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "statusReblogged": {
      "type": "object",
      "title": "StatusReblogged represents a reblogged status.",
      "properties": {
        "account": {
          "$ref": "#/definitions/account"
        },
        "application": {
          "$ref": "#/definitions/application"
        },
        "bookmarked": {
          "description": "This status has been bookmarked by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Bookmarked"
        },
        "card": {
          "$ref": "#/definitions/card"
        },
        "content": {
          "description": "The content of this status. Should be HTML, but might also be plaintext in some cases.",
          "type": "string",
          "x-go-name": "Content",
          "example": "\u003cp\u003eHey this is a status!\u003c/p\u003e"
        },
        "created_at": {
          "description": "The date when this status was created (ISO 8601 Datetime).",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-07-30T09:20:25+00:00"
        },
        "emojis": {
          "description": "Custom emoji to be used when rendering status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emoji"
          },
          "x-go-name": "Emojis"
        },
        "favourited": {
          "description": "This status has been favourited by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Favourited"
        },
        "favourites_count": {
          "description": "Number of favourites/likes this status has received, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FavouritesCount"
        },
        "id": {
          "description": "ID of the status.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "in_reply_to_account_id": {
          "description": "ID of the account being replied to.",
          "type": "string",
          "x-go-name": "InReplyToAccountID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "in_reply_to_id": {
          "description": "ID of the status being replied to.",
          "type": "string",
          "x-go-name": "InReplyToID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "language": {
          "description": "Primary language of this status (ISO 639 Part 1 two-letter language code).\nWill be null if language is not known.",
          "type": "string",
          "x-go-name": "Language",
          "example": "en"
        },
        "media_attachments": {
          "description": "Media that is attached to this status.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/attachment"
          },
          "x-go-name": "MediaAttachments"
        },
        "mentions": {
          "description": "Mentions of users within the status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mention"
          },
          "x-go-name": "Mentions"
        },
        "muted": {
          "description": "Replies to this status have been muted by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Muted"
        },
        "pinned": {
          "description": "This status has been pinned by the account viewing it (only relevant for your own statuses).",
          "type": "boolean",
          "x-go-name": "Pinned"
        },
        "poll": {
          "$ref": "#/definitions/poll"
        },
        "reblog": {
          "$ref": "#/definitions/statusReblogged"
        },
        "reblogged": {
          "description": "This status has been boosted/reblogged by the account viewing it.",
          "type": "boolean",
          "x-go-name": "Reblogged"
        },
        "reblogs_count": {
          "description": "Number of times this status has been boosted/reblogged, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReblogsCount"
        },
        "replies_count": {
          "description": "Number of replies to this status, according to our instance.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepliesCount"
        },
        "sensitive": {
          "description": "Status contains sensitive content.",
          "type": "boolean",
          "x-go-name": "Sensitive",
          "example": false
        },
        "spoiler_text": {
          "description": "Subject, summary, or content warning for the status.",
          "type": "string",
          "x-go-name": "SpoilerText",
          "example": "warning nsfw"
        },
        "tags": {
          "description": "Hashtags used within the status content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tag"
          },
          "x-go-name": "Tags"
        },
        "text": {
          "description": "Plain-text source of a status. Returned instead of content when status is deleted,\nso the user may redraft from the source text without the client having to reverse-engineer\nthe original text from the HTML content.",
          "type": "string",
          "x-go-name": "Text"
        },
        "uri": {
          "description": "ActivityPub URI of the status. Equivalent to the status's activitypub ID.",
          "type": "string",
          "x-go-name": "URI",
          "example": "https://example.org/users/some_user/statuses/01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "url": {
          "description": "The status's publicly available web URL. This link will only work if the visibility of the status is 'public'.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/@some_user/statuses/01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "visibility": {
          "description": "Visibility of this status.",
          "type": "string",
          "x-go-name": "Visibility",
          "example": "unlisted"
        }
      },
      "x-go-name": "StatusReblogged",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "statusSource": {
      "description": "StatusSource represents the source text of a\nstatus as submitted to the API when it was created.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the status.",
          "type": "string",
          "x-go-name": "ID",
          "example": "01FBVD42CQ3ZEEVMW180SBX03B"
        },
        "spoiler_text": {
          "description": "Plain-text version of spoiler text.",
          "type": "string",
          "x-go-name": "SpoilerText"
        },
        "text": {
          "description": "Plain-text source of a status.",
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-name": "StatusSource",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "swaggerCollection": {
      "type": "object",
      "title": "SwaggerCollection represents an ActivityPub Collection.",
      "properties": {
        "@context": {
          "description": "ActivityStreams JSON-LD context.\nA string or an array of strings, or more\ncomplex nested items.",
          "x-go-name": "Context",
          "example": "https://www.w3.org/ns/activitystreams"
        },
        "first": {
          "$ref": "#/definitions/swaggerCollectionPage"
        },
        "id": {
          "description": "ActivityStreams ID.",
          "type": "string",
          "x-go-name": "ID",
          "example": "https://example.org/users/some_user/statuses/106717595988259568/replies"
        },
        "last": {
          "$ref": "#/definitions/swaggerCollectionPage"
        },
        "type": {
          "description": "ActivityStreams type.",
          "type": "string",
          "x-go-name": "Type",
          "example": "Collection"
        }
      },
      "x-go-name": "SwaggerCollection",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/activitypub/users"
    },
    "swaggerCollectionPage": {
      "type": "object",
      "title": "SwaggerCollectionPage represents one page of a collection.",
      "properties": {
        "id": {
          "description": "ActivityStreams ID.",
          "type": "string",
          "x-go-name": "ID",
          "example": "https://example.org/users/some_user/statuses/106717595988259568/replies?page=true"
        },
        "items": {
          "description": "Items on this page.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Items",
          "example": [
            "https://example.org/users/some_other_user/statuses/086417595981111564",
            "https://another.example.com/users/another_user/statuses/01FCN8XDV3YG7B4R42QA6YQZ9R"
          ]
        },
        "next": {
          "description": "Link to the next page.",
          "type": "string",
          "x-go-name": "Next",
          "example": "https://example.org/users/some_user/statuses/106717595988259568/replies?only_other_accounts=true\u0026page=true"
        },
        "partOf": {
          "description": "Collection this page belongs to.",
          "type": "string",
          "x-go-name": "PartOf",
          "example": "https://example.org/users/some_user/statuses/106717595988259568/replies"
        },
        "type": {
          "description": "ActivityStreams type.",
          "type": "string",
          "x-go-name": "Type",
          "example": "CollectionPage"
        }
      },
      "x-go-name": "SwaggerCollectionPage",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/activitypub/users"
    },
    "swaggerFeaturedCollection": {
      "type": "object",
      "title": "SwaggerFeaturedCollection represents an ActivityPub OrderedCollection.",
      "properties": {
        "@context": {
          "description": "ActivityStreams JSON-LD context.\nA string or an array of strings, or more\ncomplex nested items.",
          "x-go-name": "Context",
          "example": "https://www.w3.org/ns/activitystreams"
        },
        "TotalItems": {
          "description": "Number of items in this collection.",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "id": {
          "description": "ActivityStreams ID.",
          "type": "string",
          "x-go-name": "ID",
          "example": "https://example.org/users/some_user/collections/featured"
        },
        "items": {
          "description": "List of status URIs.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Items",
          "example": [
            "https://example.org/users/some_user/statuses/01GSZ0F7Q8SJKNRF777GJD271R",
            "https://example.org/users/some_user/statuses/01GSZ0G012CBQ7TEKX689S3QRE"
          ]
        },
        "type": {
          "description": "ActivityStreams type.",
          "type": "string",
          "x-go-name": "Type",
          "example": "OrderedCollection"
        }
      },
      "x-go-name": "SwaggerFeaturedCollection",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/activitypub/users"
    },
    "tag": {
      "type": "object",
      "title": "Tag represents a hashtag used within the content of a status.",
      "properties": {
        "history": {
          "description": "History of this hashtag's usage.\nCurrently just a stub, if provided will always be an empty array.",
          "type": "array",
          "items": {},
          "x-go-name": "History",
          "example": []
        },
        "name": {
          "description": "The value of the hashtag after the # sign.",
          "type": "string",
          "x-go-name": "Name",
          "example": "helloworld"
        },
        "url": {
          "description": "Web link to the hashtag.",
          "type": "string",
          "x-go-name": "URL",
          "example": "https://example.org/tags/helloworld"
        }
      },
      "x-go-name": "Tag",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "theme": {
      "type": "object",
      "title": "Theme represents one user-selectable preset CSS theme.",
      "properties": {
        "description": {
          "description": "User-facing description of this theme.",
          "type": "string",
          "x-go-name": "Description"
        },
        "file_name": {
          "description": "FileName of this theme in the themes directory.",
          "type": "string",
          "x-go-name": "FileName"
        },
        "title": {
          "description": "User-facing title of this theme.",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-name": "Theme",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    },
    "wellKnownResponse": {
      "description": "See https://webfinger.net/",
      "type": "object",
      "title": "WellKnownResponse represents the response to either a webfinger request for an 'acct' resource, or a request to nodeinfo.\nFor example, it would be returned from https://example.org/.well-known/webfinger?resource=acct:some_username@example.org",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Aliases"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-go-name": "Links"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-name": "WellKnownResponse",
      "x-go-package": "github.com/superseriousbusiness/gotosocial/internal/api/model"
    }
  },
  "securityDefinitions": {
    "OAuth2 Application": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://example.org/oauth/token",
      "scopes": {
        "write:accounts": "grants write access to accounts"
      }
    },
    "OAuth2 Bearer": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.org/oauth/authorize",
      "tokenUrl": "https://example.org/oauth/token",
      "scopes": {
        "admin": "grants admin access to everything",
        "admin:accounts": "grants admin access to accounts",
        "read": "grants read access to everything",
        "read:accounts": "grants read access to accounts",
        "read:blocks": "grant read access to blocks",
        "read:custom_emojis": "grant read access to custom_emojis",
        "read:favourites": "grant read access to favourites",
        "read:filters": "grant read access to filters",
        "read:follows": "grant read access to follows",
        "read:lists": "grant read access to lists",
        "read:media": "grant read access to media",
        "read:mutes": "grant read access to mutes",
        "read:notifications": "grants read access to notifications",
        "read:search": "grant read access to searches",
        "read:statuses": "grants read access to statuses",
        "read:streaming": "grants read access to streaming api",
        "read:user": "grants read access to user-level info",
        "write": "grants write access to everything",
        "write:accounts": "grants write access to accounts",
        "write:blocks": "grants write access to blocks",
        "write:filters": "grants write access to filters",
        "write:follows": "grants write access to follows",
        "write:lists": "grants write access to lists",
        "write:media": "grants write access to media",
        "write:mutes": "grants write access to mutes",
        "write:statuses": "grants write access to statuses",
        "write:user": "grants write access to user-level info"
      }
    }
  }
}