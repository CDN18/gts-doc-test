// Code generated by mockery v2.7.4. DO NOT EDIT.

package mastotypes

import (
	mock "github.com/stretchr/testify/mock"
	gtsmodel "github.com/superseriousbusiness/gotosocial/internal/db/gtsmodel"
	mastotypes "github.com/superseriousbusiness/gotosocial/internal/mastotypes/mastomodel"
)

// MockConverter is an autogenerated mock type for the Converter type
type MockConverter struct {
	mock.Mock
}

// AccountToMastoPublic provides a mock function with given fields: account
func (_m *MockConverter) AccountToMastoPublic(account *gtsmodel.Account) (*mastotypes.Account, error) {
	ret := _m.Called(account)

	var r0 *mastotypes.Account
	if rf, ok := ret.Get(0).(func(*gtsmodel.Account) *mastotypes.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mastotypes.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gtsmodel.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountToMastoSensitive provides a mock function with given fields: account
func (_m *MockConverter) AccountToMastoSensitive(account *gtsmodel.Account) (*mastotypes.Account, error) {
	ret := _m.Called(account)

	var r0 *mastotypes.Account
	if rf, ok := ret.Get(0).(func(*gtsmodel.Account) *mastotypes.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mastotypes.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gtsmodel.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppToMastoPublic provides a mock function with given fields: application
func (_m *MockConverter) AppToMastoPublic(application *gtsmodel.Application) (*mastotypes.Application, error) {
	ret := _m.Called(application)

	var r0 *mastotypes.Application
	if rf, ok := ret.Get(0).(func(*gtsmodel.Application) *mastotypes.Application); ok {
		r0 = rf(application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mastotypes.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gtsmodel.Application) error); ok {
		r1 = rf(application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppToMastoSensitive provides a mock function with given fields: application
func (_m *MockConverter) AppToMastoSensitive(application *gtsmodel.Application) (*mastotypes.Application, error) {
	ret := _m.Called(application)

	var r0 *mastotypes.Application
	if rf, ok := ret.Get(0).(func(*gtsmodel.Application) *mastotypes.Application); ok {
		r0 = rf(application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mastotypes.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gtsmodel.Application) error); ok {
		r1 = rf(application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
