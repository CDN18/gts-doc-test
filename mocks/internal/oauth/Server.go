// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	oauth2 "github.com/superseriousbusiness/oauth2/v4"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// GenerateUserAccessToken provides a mock function with given fields: ti, clientSecret, userID
func (_m *Server) GenerateUserAccessToken(ti oauth2.TokenInfo, clientSecret string, userID string) (oauth2.TokenInfo, error) {
	ret := _m.Called(ti, clientSecret, userID)

	var r0 oauth2.TokenInfo
	if rf, ok := ret.Get(0).(func(oauth2.TokenInfo, string, string) oauth2.TokenInfo); ok {
		r0 = rf(ti, clientSecret, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.TokenInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(oauth2.TokenInfo, string, string) error); ok {
		r1 = rf(ti, clientSecret, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleAuthorizeRequest provides a mock function with given fields: w, r
func (_m *Server) HandleAuthorizeRequest(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleTokenRequest provides a mock function with given fields: w, r
func (_m *Server) HandleTokenRequest(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidationBearerToken provides a mock function with given fields: r
func (_m *Server) ValidationBearerToken(r *http.Request) (oauth2.TokenInfo, error) {
	ret := _m.Called(r)

	var r0 oauth2.TokenInfo
	if rf, ok := ret.Get(0).(func(*http.Request) oauth2.TokenInfo); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.TokenInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
